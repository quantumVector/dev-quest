export interface InterviewQuestion {
  id: number
  question: string
  answer: string
  difficulty?: 'junior' | 'middle' | 'senior'
  tags?: string[]
}

export const htmlInterviewQuestions: InterviewQuestion[] = [
  {
    id: 1,
    question: "Расскажите, что такое HTML и какую роль он играет в веб-разработке?",
    answer: "<p><strong>HTML</strong> — это язык гипертекстовой разметки, который является основой любой веб-страницы. Он определяет структуру и содержимое веб-документа с помощью специальных тегов.</p><p>HTML не является языком программирования, а скорее языком разметки, который описывает, как должен быть структурирован контент на странице. В веб-разработке HTML играет роль <em>скелета</em> веб-страницы — он создает логическую структуру документа, определяет заголовки, абзацы, списки, таблицы, формы и другие элементы.</p><p>Браузер интерпретирует HTML-код и отображает его пользователю в виде визуальной веб-страницы. HTML работает в связке с CSS для стилизации и JavaScript для интерактивности, образуя основу современной веб-разработки.</p>",
    difficulty: 'junior',
    tags: ['основы', 'HTML', 'веб-разработка']
  },
  {
    id: 2,
    question: "В чем разница между HTML-элементом и HTML-тегом?",
    answer: "<p><strong>HTML-тег</strong> — это ключевое слово, заключенное в угловые скобки, которое используется для разметки контента. Теги бывают открывающими и закрывающими.</p><p><strong>HTML-элемент</strong> — это более широкое понятие, которое включает в себя открывающий тег, содержимое между тегами и закрывающий тег. То есть элемент — это полная конструкция, состоящая из тегов и контента между ними.</p><p>Например, <em>тег</em> — это просто открывающая или закрывающая часть, а <em>элемент</em> — это вся конструкция целиком. Также существуют самозакрывающиеся элементы, которые состоят только из одного тега.</p><p>Важно понимать эту разницу, поскольку когда мы говорим о семантике или стилизации, мы обычно имеем в виду именно элементы, а не отдельные теги.</p>",
    difficulty: 'junior',
    tags: ['основы', 'терминология', 'HTML']
  },
  {
    id: 3,
    question: "Объясните структуру HTML-документа. Какие обязательные элементы должны присутствовать?",
    answer: "<p>Базовая структура HTML-документа включает несколько <strong>обязательных элементов</strong>:</p><ul><li>Сначала идет декларация <code>DOCTYPE</code>, которая указывает браузеру, какую версию HTML использовать</li><li>Затем следует корневой элемент <code>html</code>, который содержит весь контент страницы</li><li>Внутри html есть два основных раздела: <code>head</code> и <code>body</code></li></ul><p>Элемент <strong>head</strong> содержит метаинформацию о документе — заголовок страницы, ссылки на стили, скрипты, метатеги. Обязательным элементом внутри head является <code>title</code>, который определяет заголовок страницы, отображаемый в браузере.</p><p>Элемент <strong>body</strong> содержит весь видимый контент страницы. Также в head часто добавляют метатег с указанием кодировки charset.</p><p>Эта структура является стандартной и обеспечивает правильную интерпретацию документа браузером.</p>",
    difficulty: 'junior',
    tags: ['основы', 'структура', 'HTML']
  },
  {
    id: 4,
    question: "Что такое DOCTYPE и зачем он нужен?",
    answer: "<p><strong>DOCTYPE</strong> — это декларация типа документа, которая указывает браузеру, какую версию HTML или XHTML использует документ. Она должна быть самой первой строкой в HTML-файле, еще до тега html.</p><p>DOCTYPE не является HTML-тегом, а скорее <em>инструкцией для браузера</em>. Его основная цель — переключить браузер в стандартный режим рендеринга, а не в режим совместимости с устаревшими версиями.</p><p>Без DOCTYPE браузер может работать в так называемом <strong>'quirks mode'</strong>, где он пытается имитировать поведение старых браузеров, что может привести к неожиданным результатам отображения.</p><p>В HTML5 декларация DOCTYPE значительно упростилась и выглядит очень просто. Правильное использование DOCTYPE обеспечивает предсказуемое поведение страницы во всех современных браузерах.</p>",
    difficulty: 'junior',
    tags: ['основы', 'DOCTYPE', 'стандарты']
  },
  {
    id: 5,
    question: "Как бы вы объяснили разницу между блочными и строчными элементами?",
    answer: "<p><strong>Блочные элементы</strong> занимают всю доступную ширину родительского контейнера и всегда начинаются с новой строки. Они создают прямоугольные блоки на странице и могут содержать другие блочные и строчные элементы.</p><p>Примеры блочных элементов: <code>div</code>, <code>p</code>, <code>h1-h6</code>, <code>section</code>, <code>article</code>.</p><p><strong>Строчные элементы</strong> занимают только необходимое им место и располагаются в одной строке с другими строчными элементами. Они не могут содержать блочные элементы и обычно используются для форматирования текста внутри блочных элементов.</p><p>Примеры строчных элементов: <code>span</code>, <code>a</code>, <code>strong</code>, <code>em</code>, <code>img</code>.</p><p>Также существуют элементы типа <strong>inline-block</strong>, которые ведут себя как строчные, но позволяют задавать ширину и высоту. Понимание этой разницы критически важно для правильной верстки.</p>",
    difficulty: 'junior',
    tags: ['основы', 'блочные элементы', 'строчные элементы']
  },
  {
    id: 6,
    question: "Когда следует использовать <div> вместо <span> и наоборот?",
    answer: "<p>Выбор между <code>div</code> и <code>span</code> зависит от семантики и типа отображения:</p><p><strong>Div</strong> — это универсальный блочный контейнер, который следует использовать для:</p><ul><li>Группировки блоков контента</li><li>Создания секций страницы</li><li>Когда нужен элемент, который займет всю ширину</li><li>Создания макета страницы</li><li>Разделения контента на логические блоки</li></ul><p><strong>Span</strong> — это универсальный строчный элемент, который используется для:</p><ul><li>Выделения или группировки части текста внутри блочного элемента</li><li>Применения стилей к части текста</li><li>Создания inline-элементов</li><li>Добавления хуков для JavaScript</li></ul><p>Span не нарушает поток текста и не создает новые строки. <em>Важно помнить</em>, что и div, и span являются семантически нейтральными элементами — когда возможно, лучше использовать семантические элементы.</p>",
    difficulty: 'junior',
    tags: ['основы', 'div', 'span', 'семантика']
  },
  {
    id: 7,
    question: "Какие новые элементы появились в HTML5 по сравнению с предыдущими версиями?",
    answer: "<p>HTML5 принес множество новых семантических элементов, которые делают разметку более осмысленной:</p><h4>Структурные элементы:</h4><ul><li><code>header</code>, <code>footer</code>, <code>nav</code>, <code>main</code> — для основной структуры</li><li><code>section</code>, <code>article</code>, <code>aside</code> — для контентных блоков</li></ul><h4>Медиа-элементы:</h4><ul><li><code>audio</code> и <code>video</code> — для встраивания мультимедиа без плагинов</li><li><code>canvas</code> — для рисования графики</li></ul><h4>Контентные элементы:</h4><ul><li><code>figure</code> и <code>figcaption</code> — для изображений с подписями</li><li><code>time</code> и <code>mark</code> — для времени и выделения текста</li><li><code>details</code> и <code>summary</code> — для раскрывающихся блоков</li></ul><h4>Формы:</h4><p>Новые типы input: <code>email</code>, <code>url</code>, <code>tel</code>, <code>number</code>, <code>date</code>, <code>range</code> и другие.</p><p>Также появились новые атрибуты: <code>placeholder</code>, <code>required</code>, <code>autofocus</code>. Эти элементы улучшают семантику и предоставляют встроенную функциональность.</p>",
    difficulty: 'middle',
    tags: ['HTML5', 'новые элементы', 'семантика']
  },
  {
    id: 8,
    question: "Что вы понимаете под семантической версткой? Почему она важна?",
    answer: "<p><strong>Семантическая верстка</strong> — это подход к созданию HTML-разметки, при котором каждый элемент используется в соответствии с его смысловым значением, а не только визуальным представлением.</p><p>Это означает использование элементов, которые наилучшим образом описывают содержимое: заголовки для заголовков, параграфы для текста, списки для перечислений, <code>nav</code> для навигации.</p><h4>Почему семантическая верстка важна:</h4><ul><li><strong>Доступность:</strong> скрин-ридеры лучше понимают структуру страницы</li><li><strong>SEO:</strong> поисковые системы лучше индексируют правильно структурированный контент</li><li><strong>Поддержка кода:</strong> делает код более читаемым для разработчиков</li><li><strong>Совместимость:</strong> обеспечивает лучшую работу с различными устройствами и браузерами</li><li><strong>Будущее:</strong> готовит сайт к будущим изменениям в веб-технологиях</li></ul><p>Семантическая разметка — это <em>инвестиция в качество</em> и долговечность веб-проекта.</p>",
    difficulty: 'middle',
    tags: ['семантика', 'доступность', 'SEO', 'лучшие практики']
  },
  {
    id: 9,
    question: "Приведите примеры семантических элементов HTML5 и объясните, когда их использовать",
    answer: "<p>Семантические элементы HTML5 включают множество специализированных тегов:</p><dl><dt><strong>Header</strong></dt><dd>Используется для шапки страницы или секции, обычно содержит логотип, навигацию, заголовки</dd><dt><strong>Footer</strong></dt><dd>Для подвала страницы с контактами, копирайтом, дополнительными ссылками</dd><dt><strong>Nav</strong></dt><dd>Для основной навигации сайта, меню, breadcrumbs</dd><dt><strong>Main</strong></dt><dd>Для основного содержимого страницы, должен быть уникальным на странице</dd><dt><strong>Article</strong></dt><dd>Для независимого контента: статьи блога, новости, комментарии</dd><dt><strong>Section</strong></dt><dd>Для тематических разделов контента, обычно с заголовком</dd><dt><strong>Aside</strong></dt><dd>Для дополнительного контента: сайдбар, реклама, похожие статьи</dd><dt><strong>Time</strong></dt><dd>Для дат и времени с возможностью машинного чтения</dd><dt><strong>Mark</strong></dt><dd>Для выделения важного текста</dd><dt><strong>Figure и figcaption</strong></dt><dd>Для изображений с подписями</dd></dl><p><em>Каждый элемент следует использовать по назначению</em>, основываясь на смысле контента, а не на внешнем виде.</p>",
    difficulty: 'middle',
    tags: ['HTML5', 'семантические элементы', 'структура']
  },
  {
    id: 10,
    question: "В чем разница между <section>, <article>, <aside> и <div>?",
    answer: "<p>Эти элементы различаются по семантическому значению и назначению:</p><h4>Section</h4><p>Представляет <strong>тематический раздел документа</strong>, обычно с заголовком. Используется для группировки связанного контента: главы, разделы статьи, вкладки. Section подразумевает, что содержимое логически связано и является частью большего целого.</p><h4>Article</h4><p>Это <strong>независимый, самодостаточный контент</strong>, который может существовать отдельно от остальной страницы. Примеры: статья блога, новость, комментарий, виджет. Article может содержать section, но не наоборот.</p><h4>Aside</h4><p>Представляет контент, который <strong>косвенно связан с основным содержимым</strong>: сайдбар, реклама, дополнительная информация, список похожих статей.</p><h4>Div</h4><p>Это <strong>семантически нейтральный контейнер</strong>, который используется только для стилизации или группировки, когда нет подходящего семантического элемента.</p><p><em>Правильный выбор основывается на смысле контента:</em> если контент имеет четкое назначение, используйте соответствующий семантический элемент, div оставляйте как последний вариант.</p>",
    difficulty: 'middle',
    tags: ['семантика', 'HTML5', 'структура', 'элементы']
  }
];
