export interface InterviewQuestion {
  id: number
  question: string
  answer: string
  difficulty?: 'junior' | 'middle' | 'senior'
  tags?: string[]
}

export const htmlInterviewQuestions: InterviewQuestion[] = [
  {
    id: 1,
    question: "Расскажите, что такое HTML и какую роль он играет в веб-разработке?",
    answer: "<p><strong>HTML</strong> — это язык гипертекстовой разметки, который является основой любой веб-страницы. Он определяет структуру и содержимое веб-документа с помощью специальных тегов.</p><p>HTML не является языком программирования, а скорее языком разметки, который описывает, как должен быть структурирован контент на странице. В веб-разработке HTML играет роль <em>скелета</em> веб-страницы — он создает логическую структуру документа, определяет заголовки, абзацы, списки, таблицы, формы и другие элементы.</p><p>Браузер интерпретирует HTML-код и отображает его пользователю в виде визуальной веб-страницы. HTML работает в связке с CSS для стилизации и JavaScript для интерактивности, образуя основу современной веб-разработки.</p>",
    difficulty: 'junior',
    tags: ['основы', 'HTML', 'веб-разработка']
  },
  {
    id: 2,
    question: "В чем разница между HTML-элементом и HTML-тегом?",
    answer: "<p><strong>HTML-тег</strong> — это ключевое слово, заключенное в угловые скобки, которое используется для разметки контента. Теги бывают открывающими и закрывающими.</p><p><strong>HTML-элемент</strong> — это более широкое понятие, которое включает в себя открывающий тег, содержимое между тегами и закрывающий тег. То есть элемент — это полная конструкция, состоящая из тегов и контента между ними.</p><p>Например, <em>тег</em> — это просто открывающая или закрывающая часть, а <em>элемент</em> — это вся конструкция целиком. Также существуют самозакрывающиеся элементы, которые состоят только из одного тега.</p><p>Важно понимать эту разницу, поскольку когда мы говорим о семантике или стилизации, мы обычно имеем в виду именно элементы, а не отдельные теги.</p>",
    difficulty: 'junior',
    tags: ['основы', 'терминология', 'HTML']
  },
  {
    id: 3,
    question: "Объясните структуру HTML-документа. Какие обязательные элементы должны присутствовать?",
    answer: "<p>Базовая структура HTML-документа включает несколько <strong>обязательных элементов</strong>:</p><ul><li>Сначала идет декларация <code>DOCTYPE</code>, которая указывает браузеру, какую версию HTML использовать</li><li>Затем следует корневой элемент <code>html</code>, который содержит весь контент страницы</li><li>Внутри html есть два основных раздела: <code>head</code> и <code>body</code></li></ul><p>Элемент <strong>head</strong> содержит метаинформацию о документе — заголовок страницы, ссылки на стили, скрипты, метатеги. Обязательным элементом внутри head является <code>title</code>, который определяет заголовок страницы, отображаемый в браузере.</p><p>Элемент <strong>body</strong> содержит весь видимый контент страницы. Также в head часто добавляют метатег с указанием кодировки charset.</p><p>Эта структура является стандартной и обеспечивает правильную интерпретацию документа браузером.</p>",
    difficulty: 'junior',
    tags: ['основы', 'структура', 'HTML']
  },
  {
    id: 4,
    question: "Что такое DOCTYPE и зачем он нужен?",
    answer: "<p><strong>DOCTYPE</strong> — это декларация типа документа, которая указывает браузеру, какую версию HTML или XHTML использует документ. Она должна быть самой первой строкой в HTML-файле, еще до тега html.</p><p>DOCTYPE не является HTML-тегом, а скорее <em>инструкцией для браузера</em>. Его основная цель — переключить браузер в стандартный режим рендеринга, а не в режим совместимости с устаревшими версиями.</p><p>Без DOCTYPE браузер может работать в так называемом <strong>'quirks mode'</strong>, где он пытается имитировать поведение старых браузеров, что может привести к неожиданным результатам отображения.</p><p>В HTML5 декларация DOCTYPE значительно упростилась и выглядит очень просто. Правильное использование DOCTYPE обеспечивает предсказуемое поведение страницы во всех современных браузерах.</p>",
    difficulty: 'junior',
    tags: ['основы', 'DOCTYPE', 'стандарты']
  },
  {
    id: 5,
    question: "Как бы вы объяснили разницу между блочными и строчными элементами?",
    answer: "<p><strong>Блочные элементы</strong> занимают всю доступную ширину родительского контейнера и всегда начинаются с новой строки. Они создают прямоугольные блоки на странице и могут содержать другие блочные и строчные элементы.</p><p>Примеры блочных элементов: <code>div</code>, <code>p</code>, <code>h1-h6</code>, <code>section</code>, <code>article</code>.</p><p><strong>Строчные элементы</strong> занимают только необходимое им место и располагаются в одной строке с другими строчными элементами. Они не могут содержать блочные элементы и обычно используются для форматирования текста внутри блочных элементов.</p><p>Примеры строчных элементов: <code>span</code>, <code>a</code>, <code>strong</code>, <code>em</code>, <code>img</code>.</p><p>Также существуют элементы типа <strong>inline-block</strong>, которые ведут себя как строчные, но позволяют задавать ширину и высоту. Понимание этой разницы критически важно для правильной верстки.</p>",
    difficulty: 'junior',
    tags: ['основы', 'блочные элементы', 'строчные элементы']
  },
  {
    id: 6,
    question: "Когда следует использовать <div> вместо <span> и наоборот?",
    answer: "<p>Выбор между <code>div</code> и <code>span</code> зависит от семантики и типа отображения:</p><p><strong>Div</strong> — это универсальный блочный контейнер, который следует использовать для:</p><ul><li>Группировки блоков контента</li><li>Создания секций страницы</li><li>Когда нужен элемент, который займет всю ширину</li><li>Создания макета страницы</li><li>Разделения контента на логические блоки</li></ul><p><strong>Span</strong> — это универсальный строчный элемент, который используется для:</p><ul><li>Выделения или группировки части текста внутри блочного элемента</li><li>Применения стилей к части текста</li><li>Создания inline-элементов</li><li>Добавления хуков для JavaScript</li></ul><p>Span не нарушает поток текста и не создает новые строки. <em>Важно помнить</em>, что и div, и span являются семантически нейтральными элементами — когда возможно, лучше использовать семантические элементы.</p>",
    difficulty: 'junior',
    tags: ['основы', 'div', 'span', 'семантика']
  },
  {
    id: 7,
    question: "Какие новые элементы появились в HTML5 по сравнению с предыдущими версиями?",
    answer: "<p>HTML5 принес множество новых семантических элементов, которые делают разметку более осмысленной:</p><h4>Структурные элементы:</h4><ul><li><code>header</code>, <code>footer</code>, <code>nav</code>, <code>main</code> — для основной структуры</li><li><code>section</code>, <code>article</code>, <code>aside</code> — для контентных блоков</li></ul><h4>Медиа-элементы:</h4><ul><li><code>audio</code> и <code>video</code> — для встраивания мультимедиа без плагинов</li><li><code>canvas</code> — для рисования графики</li></ul><h4>Контентные элементы:</h4><ul><li><code>figure</code> и <code>figcaption</code> — для изображений с подписями</li><li><code>time</code> и <code>mark</code> — для времени и выделения текста</li><li><code>details</code> и <code>summary</code> — для раскрывающихся блоков</li></ul><h4>Формы:</h4><p>Новые типы input: <code>email</code>, <code>url</code>, <code>tel</code>, <code>number</code>, <code>date</code>, <code>range</code> и другие.</p><p>Также появились новые атрибуты: <code>placeholder</code>, <code>required</code>, <code>autofocus</code>. Эти элементы улучшают семантику и предоставляют встроенную функциональность.</p>",
    difficulty: 'middle',
    tags: ['HTML5', 'новые элементы', 'семантика']
  },
  {
    id: 8,
    question: "Что вы понимаете под семантической версткой? Почему она важна?",
    answer: "<p><strong>Семантическая верстка</strong> — это подход к созданию HTML-разметки, при котором каждый элемент используется в соответствии с его смысловым значением, а не только визуальным представлением.</p><p>Это означает использование элементов, которые наилучшим образом описывают содержимое: заголовки для заголовков, параграфы для текста, списки для перечислений, <code>nav</code> для навигации.</p><h4>Почему семантическая верстка важна:</h4><ul><li><strong>Доступность:</strong> скрин-ридеры лучше понимают структуру страницы</li><li><strong>SEO:</strong> поисковые системы лучше индексируют правильно структурированный контент</li><li><strong>Поддержка кода:</strong> делает код более читаемым для разработчиков</li><li><strong>Совместимость:</strong> обеспечивает лучшую работу с различными устройствами и браузерами</li><li><strong>Будущее:</strong> готовит сайт к будущим изменениям в веб-технологиях</li></ul><p>Семантическая разметка — это <em>инвестиция в качество</em> и долговечность веб-проекта.</p>",
    difficulty: 'middle',
    tags: ['семантика', 'доступность', 'SEO', 'лучшие практики']
  },
  {
    id: 9,
    question: "Приведите примеры семантических элементов HTML5 и объясните, когда их использовать",
    answer: "<p>Семантические элементы HTML5 включают множество специализированных тегов:</p><dl><dt><strong>Header</strong></dt><dd>Используется для шапки страницы или секции, обычно содержит логотип, навигацию, заголовки</dd><dt><strong>Footer</strong></dt><dd>Для подвала страницы с контактами, копирайтом, дополнительными ссылками</dd><dt><strong>Nav</strong></dt><dd>Для основной навигации сайта, меню, breadcrumbs</dd><dt><strong>Main</strong></dt><dd>Для основного содержимого страницы, должен быть уникальным на странице</dd><dt><strong>Article</strong></dt><dd>Для независимого контента: статьи блога, новости, комментарии</dd><dt><strong>Section</strong></dt><dd>Для тематических разделов контента, обычно с заголовком</dd><dt><strong>Aside</strong></dt><dd>Для дополнительного контента: сайдбар, реклама, похожие статьи</dd><dt><strong>Time</strong></dt><dd>Для дат и времени с возможностью машинного чтения</dd><dt><strong>Mark</strong></dt><dd>Для выделения важного текста</dd><dt><strong>Figure и figcaption</strong></dt><dd>Для изображений с подписями</dd></dl><p><em>Каждый элемент следует использовать по назначению</em>, основываясь на смысле контента, а не на внешнем виде.</p>",
    difficulty: 'middle',
    tags: ['HTML5', 'семантические элементы', 'структура']
  },
  {
    id: 10,
    question: "В чем разница между <section>, <article>, <aside> и <div>?",
    answer: "<p>Эти элементы различаются по семантическому значению и назначению:</p><h4>Section</h4><p>Представляет <strong>тематический раздел документа</strong>, обычно с заголовком. Используется для группировки связанного контента: главы, разделы статьи, вкладки. Section подразумевает, что содержимое логически связано и является частью большего целого.</p><h4>Article</h4><p>Это <strong>независимый, самодостаточный контент</strong>, который может существовать отдельно от остальной страницы. Примеры: статья блога, новость, комментарий, виджет. Article может содержать section, но не наоборот.</p><h4>Aside</h4><p>Представляет контент, который <strong>косвенно связан с основным содержимым</strong>: сайдбар, реклама, дополнительная информация, список похожих статей.</p><h4>Div</h4><p>Это <strong>семантически нейтральный контейнер</strong>, который используется только для стилизации или группировки, когда нет подходящего семантического элемента.</p><p><em>Правильный выбор основывается на смысле контента:</em> если контент имеет четкое назначение, используйте соответствующий семантический элемент, div оставляйте как последний вариант.</p>",
    difficulty: 'middle',
    tags: ['семантика', 'HTML5', 'структура', 'элементы']
  },
  {
    id: 11,
    question: "Как бы вы разметили структуру блога с использованием семантических элементов?",
    answer: "<p>Для разметки структуры блога я бы использовал следующую семантическую иерархию:</p><p><strong>Общая структура:</strong> Начал бы с элемента <code>header</code> для шапки сайта с логотипом и главной навигацией, затем <code>main</code> для основного контента, и <code>footer</code> для подвала.</p><p><strong>Основной контент:</strong> Внутри <code>main</code> разместил бы список статей, где каждая статья обернута в <code>article</code>. Внутри каждого article использовал бы <code>header</code> для заголовка и метаинформации, основной текст в параграфах, и <code>footer</code> для тегов и информации об авторе.</p><p><strong>Боковая панель:</strong> Элемент <code>aside</code> для сайдбара с виджетами: поиск, категории, популярные статьи, архив.</p><p><strong>Навигация:</strong> Отдельный <code>nav</code> для пагинации или breadcrumbs.</p><p>Такая структура обеспечивает четкое понимание иерархии контента как для браузеров, так и для поисковых систем.</p>",
    difficulty: 'middle',
    tags: ['семантика', 'структура', 'блог', 'практика']
  },
  {
    id: 12,
    question: "Покажите, как правильно использовать заголовки (h1-h6) для создания иерархии контента",
    answer: "<p>Заголовки создают <strong>логическую иерархию документа</strong> и должны использоваться последовательно:</p><p><strong>H1</strong> — это главный заголовок страницы, должен быть только один на странице. Это название статьи, главной темы или раздела сайта.</p><p><strong>H2</strong> — основные разделы контента, подтемы главной темы.</p><p><strong>H3-H6</strong> — подразделы соответствующего уровня.</p><p><em>Важные принципы:</em></p><ul><li>Не пропускайте уровни — после H2 должен идти H3, а не H5</li><li>Используйте заголовки для структуры, а не для размера шрифта</li><li>Каждый заголовок должен логически описывать следующий за ним контент</li><li>Заголовки помогают скрин-ридерам создавать навигацию по странице</li></ul><p>Правильная иерархия заголовков критически важна для SEO и доступности — поисковые системы и вспомогательные технологии используют её для понимания структуры контента.</p>",
    difficulty: 'middle',
    tags: ['заголовки', 'иерархия', 'SEO', 'доступность']
  },
  {
    id: 13,
    question: "Объясните разницу между <strong> и <b>, <em> и <i>",
    answer: "<p>Эти элементы различаются по <strong>семантическому значению</strong>, хотя визуально могут выглядеть одинаково:</p><h4>Strong vs B:</h4><p><code>Strong</code> — это <strong>семантический элемент</strong>, который указывает на важность или срочность текста. Браузеры и скрин-ридеры понимают, что этот текст имеет особое значение.</p><p><code>B</code> — это <strong>презентационный элемент</strong>, который просто делает текст жирным без семантического значения.</p><h4>Em vs I:</h4><p><code>Em</code> — добавляет <strong>смысловое ударение</strong> на текст, изменяет интонацию при чтении скрин-ридером.</p><p><code>I</code> — просто наклоняет текст, без семантического значения.</p><p><em>Рекомендация:</em> Всегда используйте семантические элементы <code>strong</code> и <code>em</code> для выделения важности и ударения, а <code>b</code> и <code>i</code> — только когда нужно чисто визуальное форматирование без семантического значения, например, для иконок или декоративных элементов.</p>",
    difficulty: 'middle',
    tags: ['семантика', 'форматирование', 'доступность']
  },
  {
    id: 14,
    question: "Как семантическая разметка влияет на SEO?",
    answer: "<p>Семантическая разметка <strong>существенно влияет на SEO</strong> несколькими способами:</p><h4>Понимание контента:</h4><p>Поисковые системы лучше понимают структуру и смысл контента. Правильные заголовки помогают определить главные темы страницы, а семантические элементы показывают важность разных частей контента.</p><h4>Структурированные данные:</h4><p>Элементы как <code>article</code>, <code>time</code>, <code>address</code> помогают поисковикам извлекать структурированную информацию для rich snippets.</p><h4>Навигация по сайту:</h4><p>Элементы <code>nav</code>, <code>header</code>, <code>footer</code> помогают поисковым роботам понять архитектуру сайта и найти важные ссылки.</p><h4>Контекст контента:</h4><p>Элементы <code>main</code>, <code>aside</code>, <code>section</code> помогают определить основной контент страницы и отделить его от второстепенного.</p><p><em>Результат:</em> Правильная семантическая разметка повышает релевантность страницы для поисковых запросов, улучшает показатели в поисковой выдаче и может привести к появлению расширенных сниппетов.</p>",
    difficulty: 'middle',
    tags: ['SEO', 'семантика', 'поисковая оптимизация']
  },
  {
    id: 15,
    question: "Расскажите о микроразметке (Schema.org, microdata)",
    answer: "<p><strong>Микроразметка</strong> — это способ добавления структурированных данных в HTML, который помогает поисковым системам лучше понять содержимое страницы.</p><h4>Schema.org:</h4><p>Это <strong>открытый стандарт</strong> для разметки структурированных данных, поддерживаемый Google, Microsoft, Yahoo и Yandex. Он предоставляет словарь для описания различных типов контента: статьи, товары, события, организации, рецепты.</p><h4>Microdata:</h4><p>Это <strong>HTML-атрибуты</strong> для встраивания машиночитаемых данных: <code>itemscope</code>, <code>itemtype</code>, <code>itemprop</code>. Они позволяют описать сущности и их свойства прямо в HTML.</p><h4>Альтернативы:</h4><p>Также существуют <strong>JSON-LD</strong> (более современный подход) и <strong>RDFa</strong> для встраивания структурированных данных.</p><h4>Преимущества:</h4><ul><li>Улучшение внешнего вида в поисковой выдаче</li><li>Появление rich snippets</li><li>Лучшее понимание контента поисковыми системами</li><li>Повышение CTR</li></ul><p>Микроразметка особенно важна для коммерческих сайтов, новостных порталов и контентных проектов.</p>",
    difficulty: 'senior',
    tags: ['микроразметка', 'Schema.org', 'SEO', 'структурированные данные']
  },
  {
    id: 16,
    question: "Что такое веб-доступность и почему она важна?",
    answer: "<p><strong>Веб-доступность</strong> — это практика создания веб-сайтов и приложений, которые могут использовать все люди, включая тех, кто имеет различные физические, когнитивные или технические ограничения.</p><h4>Кто нуждается в доступности:</h4><ul><li>Люди с нарушениями зрения (слепые, слабовидящие)</li><li>Люди с нарушениями слуха</li><li>Люди с двигательными нарушениями</li><li>Люди с когнитивными особенностями</li><li>Пожилые пользователи</li><li>Пользователи с медленным интернетом или старыми устройствами</li></ul><h4>Почему это важно:</h4><p><strong>Этические соображения:</strong> Интернет должен быть доступен для всех без исключения.</p><p><strong>Правовые требования:</strong> Во многих странах есть законы, требующие соблюдения стандартов доступности.</p><p><strong>Бизнес-преимущества:</strong> Расширение аудитории, улучшение SEO, лучший пользовательский опыт для всех.</p><p><strong>Техническое качество:</strong> Доступный код обычно более семантичен, структурирован и поддерживаем.</p>",
    difficulty: 'middle',
    tags: ['доступность', 'accessibility', 'инклюзивность']
  },
  {
    id: 17,
    question: "Расскажите о принципах WCAG (Web Content Accessibility Guidelines)",
    answer: "<p><strong>WCAG</strong> — это международные стандарты веб-доступности, разработанные W3C. Они основаны на четырех основных принципах:</p><h4>1. Perceivable (Воспринимаемость):</h4><p>Информация должна быть представлена так, чтобы пользователи могли её воспринять. Это включает альтернативный текст для изображений, субтитры для видео, достаточный контраст цветов.</p><h4>2. Operable (Управляемость):</h4><p>Интерфейс должен быть управляемым всеми пользователями. Вся функциональность должна быть доступна с клавиатуры, нужно избегать контента, вызывающего судороги.</p><h4>3. Understandable (Понятность):</h4><p>Информация и интерфейс должны быть понятными. Текст должен быть читаемым, страницы должны работать предсказуемо.</p><h4>4. Robust (Надежность):</h4><p>Контент должен корректно работать с различными технологиями, включая вспомогательные. Код должен быть валидным и совместимым.</p><p>WCAG имеет три уровня соответствия: <strong>A, AA, AAA</strong>, где AA считается стандартным уровнем для большинства сайтов.</p>",
    difficulty: 'senior',
    tags: ['WCAG', 'доступность', 'стандарты', 'принципы']
  },
  {
    id: 18,
    question: "Как правильно использовать атрибуты alt для изображений?",
    answer: "<p>Атрибут <code>alt</code> предоставляет <strong>альтернативное текстовое описание</strong> изображения для пользователей, которые не могут его видеть:</p><h4>Основные правила:</h4><ul><li><strong>Будьте описательными:</strong> Опишите содержание и функцию изображения, а не только его внешний вид</li><li><strong>Будьте краткими:</strong> Обычно 125 символов или меньше</li><li><strong>Избегайте избыточности:</strong> Не начинайте с 'изображение' или 'картинка'</li><li><strong>Учитывайте контекст:</strong> Описание должно соответствовать роли изображения на странице</li></ul><h4>Особые случаи:</h4><p><strong>Декоративные изображения:</strong> Используйте пустой alt атрибут, чтобы скрин-ридеры игнорировали их.</p><p><strong>Изображения-ссылки:</strong> Описывайте назначение ссылки, а не изображение.</p><p><strong>Сложные изображения:</strong> Для графиков, диаграмм используйте краткое описание в alt и подробное в тексте или через longdesc.</p><p><em>Помните:</em> Alt-текст читается скрин-ридерами вслух, поэтому он должен звучать естественно в контексте окружающего текста.</p>",
    difficulty: 'middle',
    tags: ['доступность', 'изображения', 'alt', 'скрин-ридеры']
  },
  {
    id: 19,
    question: "Что такое ARIA-атрибуты и когда их следует применять?",
    answer: "<p><strong>ARIA</strong> (Accessible Rich Internet Applications) — это набор атрибутов, которые делают веб-контент более доступным для людей с ограниченными возможностями, особенно при работе с динамическим контентом.</p><h4>Основные типы ARIA-атрибутов:</h4><p><strong>Роли (roles):</strong> Определяют, что представляет собой элемент — кнопка, диалог, навигация.</p><p><strong>Свойства (properties):</strong> Описывают свойства элементов — <code>aria-label</code>, <code>aria-describedby</code>, <code>aria-required</code>.</p><p><strong>Состояния (states):</strong> Описывают текущее состояние — <code>aria-expanded</code>, <code>aria-hidden</code>, <code>aria-disabled</code>.</p><h4>Когда использовать:</h4><ul><li>Когда семантических HTML-элементов недостаточно</li><li>Для сложных интерактивных виджетов</li><li>Для динамического контента</li><li>Когда нужно скрыть или показать элементы для скрин-ридеров</li></ul><p><strong>Важное правило:</strong> Используйте ARIA только когда это действительно необходимо. Сначала попробуйте решить задачу семантическим HTML, и только потом добавляйте ARIA.</p>",
    difficulty: 'senior',
    tags: ['ARIA', 'доступность', 'интерактивность', 'динамический контент']
  },
  {
    id: 20,
    question: "Как обеспечить доступность форм для пользователей с ограниченными возможностями?",
    answer: "<p>Доступность форм критически важна, поскольку формы — это основной способ взаимодействия пользователей с сайтом:</p><h4>Лейблы и подписи:</h4><p><strong>Всегда используйте label</strong> для каждого поля ввода. Свяжите label с input через атрибут <code>for</code> или оберните input в label.</p><h4>Группировка полей:</h4><p>Используйте <code>fieldset</code> и <code>legend</code> для группировки связанных полей, особенно для радио-кнопок и чекбоксов.</p><h4>Инструкции и ошибки:</h4><p>Добавляйте инструкции через <code>aria-describedby</code>, показывайте ошибки валидации рядом с полями и используйте <code>aria-invalid</code> для некорректных полей.</p><h4>Обязательные поля:</h4><p>Используйте атрибут <code>required</code> и <code>aria-required</code>, визуально выделяйте обязательные поля.</p><h4>Навигация:</h4><p>Обеспечьте логичный порядок табуляции, используйте <code>tabindex</code> при необходимости.</p><p><strong>Дополнительно:</strong> Предоставляйте автозаполнение через <code>autocomplete</code>, используйте подходящие типы input, обеспечивайте достаточное время для заполнения.</p>",
    difficulty: 'senior',
    tags: ['доступность', 'формы', 'labels', 'валидация']
  },
  {
    id: 21,
    question: "Объясните важность правильной структуры заголовков для screen readers",
    answer: "<p>Структура заголовков — это <strong>основа навигации</strong> для пользователей скрин-ридеров:</p><h4>Создание карты страницы:</h4><p>Скрин-ридеры создают <strong>интерактивную карту заголовков</strong>, которая позволяет пользователям быстро переходить между разделами страницы. Это как оглавление книги — без него сложно найти нужную информацию.</p><h4>Быстрая навигация:</h4><p>Пользователи могут <strong>перемещаться по заголовкам</strong> с помощью горячих клавиш, пропуская ненужные разделы и сразу переходя к интересующему контенту.</p><h4>Понимание иерархии:</h4><p>Правильная последовательность H1-H6 помогает понять <strong>структуру и важность</strong> разных частей контента. Пропуск уровней может дезориентировать пользователя.</p><h4>Контекст:</h4><p>Заголовки предоставляют <strong>контекст для следующего контента</strong>. Скрин-ридер может объявить заголовок перед чтением содержимого раздела.</p><p><em>Статистика:</em> Около 70% пользователей скрин-ридеров используют заголовки как основной способ навигации по странице. Плохая структура заголовков может сделать сайт практически неиспользуемым для этих пользователей.</p>",
    difficulty: 'senior',
    tags: ['доступность', 'скрин-ридеры', 'заголовки', 'навигация']
  },
  {
    id: 22,
    question: "Как проверить доступность веб-страницы? Какие инструменты вы знаете?",
    answer: "<p>Существует множество инструментов и методов для проверки доступности:</p><h4>Автоматические инструменты:</h4><p><strong>Браузерные расширения:</strong> axe DevTools, WAVE, Lighthouse (встроен в Chrome DevTools) — позволяют быстро выявить основные проблемы доступности.</p><p><strong>Онлайн-сервисы:</strong> WebAIM WAVE, Pa11y, aXe Monitor — для проверки отдельных страниц или целых сайтов.</p><p><strong>Инструменты разработчика:</strong> Accessibility tab в DevTools, Color Contrast Analyzer.</p><h4>Ручное тестирование:</h4><p><strong>Навигация с клавиатуры:</strong> Проверьте, можно ли пользоваться сайтом только с клавиатуры, без мыши.</p><p><strong>Скрин-ридеры:</strong> Протестируйте с NVDA (Windows), VoiceOver (Mac), или JAWS.</p><p><strong>Имитация ограничений:</strong> Проверьте контрастность, масштабирование, отключение изображений.</p><h4>Комплексный подход:</h4><p>Автоматические инструменты находят только 20-30% проблем доступности. <em>Ручное тестирование обязательно</em>, особенно с реальными пользователями с ограниченными возможностями.</p>",
    difficulty: 'senior',
    tags: ['доступность', 'тестирование', 'инструменты', 'аудит']
  },
  {
    id: 23,
    question: "Что такое табуляция (tab order) и как её контролировать?",
    answer: "<p><strong>Табуляция (tab order)</strong> — это последовательность, в которой элементы получают фокус при навигации с клавиатуры с помощью клавиши Tab:</p><h4>Естественный порядок:</h4><p>По умолчанию браузер устанавливает табуляцию в порядке появления элементов в DOM. Интерактивные элементы (ссылки, кнопки, поля форм) автоматически включаются в tab order.</p><h4>Контроль табуляции:</h4><p><strong>Tabindex='0':</strong> Добавляет элемент в естественный tab order</p><p><strong>Tabindex='-1':</strong> Исключает элемент из tab order, но позволяет программно установить фокус</p><p><strong>Tabindex='1+' (положительные значения):</strong> Не рекомендуется, нарушает естественный порядок</p><h4>Лучшие практики:</h4><ul><li>Следуйте логической последовательности контента</li><li>Избегайте положительных значений tabindex</li><li>Убедитесь, что фокус виден (outline)</li><li>Тестируйте навигацию с клавиатуры</li><li>Используйте skip links для длинных страниц</li></ul><p><em>Помните:</em> Хорошая табуляция — это основа доступности для пользователей, которые не могут использовать мышь.</p>",
    difficulty: 'senior',
    tags: ['доступность', 'клавиатурная навигация', 'табуляция', 'фокус']
  },
  {
    id: 24,
    question: "Как работать с aria-label, aria-describedby, aria-hidden?",
    answer: "<p>Эти ARIA-атрибуты решают разные задачи доступности:</p><h4>aria-label:</h4><p><strong>Назначение:</strong> Предоставляет доступное имя элементу, когда видимый текст отсутствует или недостаточен.</p><p><strong>Использование:</strong> Кнопки только с иконками, ссылки-изображения, сложные виджеты. Полностью заменяет текстовое содержимое для скрин-ридеров.</p><h4>aria-describedby:</h4><p><strong>Назначение:</strong> Ссылается на другие элементы, которые предоставляют дополнительное описание текущего элемента.</p><p><strong>Использование:</strong> Связывание полей форм с инструкциями, ошибками валидации, подсказками. Дополняет основное имя элемента.</p><h4>aria-hidden:</h4><p><strong>Назначение:</strong> Скрывает элементы от вспомогательных технологий, оставляя их видимыми визуально.</p><p><strong>Использование:</strong> Декоративные иконки, дублирующий контент, элементы, не несущие смысловой нагрузки.</p><h4>Важные правила:</h4><ul><li>aria-label и aria-describedby должны содержать осмысленный текст</li><li>Не используйте aria-hidden для важного контента</li><li>Тестируйте с реальными скрин-ридерами</li></ul>",
    difficulty: 'senior',
    tags: ['ARIA', 'доступность', 'атрибуты', 'скрин-ридеры']
  },
  {
    id: 25,
    question: "Какие проблемы решают адаптивные изображения?",
    answer: "<p>Адаптивные изображения решают несколько критических проблем современной веб-разработки:</p><h4>Производительность:</h4><p><strong>Оптимизация трафика:</strong> Загрузка изображений подходящего размера для каждого устройства. Зачем загружать изображение 2000px на экран 320px?</p><p><strong>Скорость загрузки:</strong> Меньшие файлы загружаются быстрее, особенно на медленных соединениях.</p><h4>Качество отображения:</h4><p><strong>Retina-дисплеи:</strong> Экраны с высокой плотностью пикселей требуют изображения в 2x или 3x разрешении для четкого отображения.</p><p><strong>Различные размеры экранов:</strong> От смартфонов до больших мониторов — каждое устройство нуждается в оптимизированном изображении.</p><h4>Art Direction:</h4><p><strong>Разные композиции:</strong> На мобильных устройствах может потребоваться обрезанная или кадрированная версия изображения.</p><h4>Пропускная способность:</h4><p><strong>Экономия данных:</strong> Особенно важно для пользователей с ограниченным мобильным трафиком.</p><p>Адаптивные изображения — это <em>баланс между качеством и производительностью</em>, обеспечивающий оптимальный пользовательский опыт на всех устройствах.</p>",
    difficulty: 'middle',
    tags: ['адаптивные изображения', 'производительность', 'отзывчивый дизайн']
  },
  {
    id: 26,
    question: "В чем разница между разрешением экрана и плотностью пикселей?",
    answer: "<p><strong>Разрешение экрана</strong> — это количество физических пикселей, которые может отображать устройство, измеряется в пикселях по ширине и высоте, например 1920x1080.</p><p><strong>Плотность пикселей</strong> — это количество пикселей на дюйм физического экрана, измеряется в PPI (pixels per inch) или DPI (dots per inch).</p><h4>Ключевые различия:</h4><p><strong>Физический размер имеет значение:</strong> Два экрана могут иметь одинаковое разрешение 1920x1080, но если один — это 24-дюймовый монитор, а другой — 5-дюймовый смартфон, плотность пикселей будет кардинально разной.</p><p><strong>Device Pixel Ratio:</strong> Современные устройства используют концепцию логических пикселей. iPhone с экраном 750x1334 физических пикселей имеет device pixel ratio 2, что означает 375x667 логических пикселей.</p><p><strong>Практическое значение:</strong> Высокая плотность пикселей требует изображений в более высоком разрешении для четкого отображения. Изображение 100x100px на обычном экране будет выглядеть размыто на Retina-дисплее без соответствующей оптимизации.</p>",
    difficulty: 'middle',
    tags: ['адаптивные изображения', 'разрешение', 'плотность пикселей', 'retina']
  },
  {
    id: 27,
    question: "Объясните концепцию art direction в контексте изображений",
    answer: "<p><strong>Art direction</strong> — это возможность показывать разные версии изображения в зависимости от размера экрана или устройства, не просто масштабируя, а изменяя композицию или содержание.</p><h4>Примеры art direction:</h4><p><strong>Кадрирование:</strong> На десктопе показываем широкое пейзажное изображение, на мобильном — портретную обрезку, фокусируясь на главном объекте.</p><p><strong>Разная композиция:</strong> Для баннера на большом экране используем горизонтальную композицию с текстом справа, на мобильном — вертикальную с текстом снизу.</p><p><strong>Изменение содержания:</strong> На десктопе показываем детализированную инфографику, на мобильном — упрощенную версию с крупными элементами.</p><h4>Отличие от обычного responsive:</h4><p>Обычная адаптивность просто <em>масштабирует изображение</em>, art direction <em>меняет его содержание или композицию</em> для лучшего восприятия на конкретном устройстве.</p><p>Это особенно важно для изображений с мелкими деталями, текстом или сложной композицией, которые могут стать нечитаемыми при простом уменьшении.</p>",
    difficulty: 'middle',
    tags: ['art direction', 'адаптивные изображения', 'композиция', 'отзывчивый дизайн']
  },
  {
    id: 28,
    question: "Как использовать атрибут srcset в теге <img>?",
    answer: "<p>Атрибут <code>srcset</code> позволяет предоставить браузеру <strong>список альтернативных источников изображения</strong> с дескрипторами, и браузер сам выберет наиболее подходящий вариант.</p><h4>Синтаксис с дескриптором плотности (x):</h4><p>Используется для Retina-дисплеев: каждое изображение помечается множителем плотности пикселей. Браузер выберет изображение, соответствующее device pixel ratio устройства.</p><h4>Синтаксис с дескриптором ширины (w):</h4><p>Указывает реальную ширину изображения в пикселях. Браузер использует эту информацию вместе с атрибутом <code>sizes</code> для выбора оптимального варианта.</p><h4>Как браузер выбирает:</h4><p>Браузер анализирует размер viewport, device pixel ratio, доступную пропускную способность и выбирает <strong>наиболее подходящее изображение</strong>. Это решение браузера, не разработчика.</p><h4>Fallback:</h4><p>Атрибут <code>src</code> служит fallback для старых браузеров и используется браузером как базовое изображение в srcset.</p><p><em>Важно:</em> srcset — это предложение браузеру, а не обязательная инструкция. Браузер может выбрать любое изображение из списка.</p>",
    difficulty: 'middle',
    tags: ['srcset', 'адаптивные изображения', 'производительность']
  },
  {
    id: 29,
    question: "Когда и как применять элемент <picture>?",
    answer: "<p>Элемент <code>picture</code> используется для <strong>полного контроля над выбором изображения</strong>, когда возможностей <code>img</code> с <code>srcset</code> недостаточно.</p><h4>Основные сценарии использования:</h4><p><strong>Art direction:</strong> Когда нужны разные изображения для разных размеров экрана, а не просто масштабирование одного изображения.</p><p><strong>Поддержка форматов:</strong> Предоставление современных форматов (WebP, AVIF) с fallback на JPEG/PNG для старых браузеров.</p><p><strong>Точный контроль:</strong> Когда нужно четко определить, какое изображение показывать в каких условиях.</p><h4>Структура picture:</h4><p>Элемент содержит несколько тегов <code>source</code> с медиа-запросами и один тег <code>img</code> как fallback. Браузер проверяет source элементы сверху вниз и использует первый подходящий.</p><h4>Преимущества перед img:</h4><ul><li>Точный контроль через медиа-запросы</li><li>Возможность указать разные изображения для разных условий</li><li>Поддержка множественных форматов</li><li>Семантическая ясность намерений</li></ul><p>Picture — это <em>декларативное решение</em> для сложных случаев адаптивных изображений.</p>",
    difficulty: 'middle',
    tags: ['picture', 'адаптивные изображения', 'art direction', 'форматы изображений']
  },
  {
    id: 30,
    question: "Объясните синтаксис дескрипторов w и x в srcset",
    answer: "<p>Дескрипторы <code>w</code> и <code>x</code> в <code>srcset</code> предоставляют браузеру разную информацию для выбора изображения:</p><h4>Дескриптор x (плотность пикселей):</h4><p><strong>Назначение:</strong> Указывает, для какой плотности пикселей предназначено изображение.</p><p><strong>Синтаксис:</strong> Число, за которым следует <code>x</code>. Например, <code>1x</code> для обычных экранов, <code>2x</code> для Retina.</p><p><strong>Применение:</strong> Используется когда изображение будет отображаться в фиксированном размере, но нужны варианты для разной плотности пикселей.</p><h4>Дескриптор w (ширина изображения):</h4><p><strong>Назначение:</strong> Сообщает браузеру реальную ширину изображения в пикселях.</p><p><strong>Синтаксис:</strong> Число пикселей, за которым следует <code>w</code>. Например, <code>800w</code> означает, что изображение шириной 800 пикселей.</p><p><strong>Применение:</strong> Используется вместе с атрибутом <code>sizes</code> для fluid изображений, которые меняют размер в зависимости от viewport.</p><h4>Важное правило:</h4><p><em>Нельзя смешивать дескрипторы w и x в одном srcset</em> — используйте либо только x, либо только w дескрипторы.</p>",
    difficulty: 'middle',
    tags: ['srcset', 'дескрипторы', 'w', 'x', 'плотность пикселей']
  },
  {
    id: 31,
    question: "Что такое sizes атрибут и как его правильно использовать?",
    answer: "<p>Атрибут <code>sizes</code> сообщает браузеру, <strong>какой размер будет занимать изображение</strong> в различных условиях просмотра. Он работает в паре с <code>srcset</code> с дескрипторами <code>w</code>.</p><h4>Зачем нужен sizes:</h4><p>Браузер должен выбрать изображение <em>до того, как CSS загрузится</em>. Sizes предоставляет эту информацию заранее, описывая, какую часть viewport займет изображение.</p><h4>Синтаксис:</h4><p>Состоит из медиа-условий и соответствующих размеров: <code>(max-width: 600px) 100vw, 50vw</code></p><p>Это означает: если ширина экрана до 600px, изображение займет 100% viewport width, иначе — 50%.</p><h4>Алгоритм работы браузера:</h4><ol><li>Определяет текущую ширину viewport</li><li>Вычисляет размер изображения по sizes</li><li>Учитывает device pixel ratio</li><li>Выбирает подходящее изображение из srcset</li></ol><h4>Лучшие практики:</h4><ul><li>Используйте точные размеры, соответствующие CSS</li><li>Тестируйте в разных браузерах</li><li>Учитывайте margins и padding</li></ul><p>Правильный sizes критически важен для оптимизации загрузки изображений.</p>",
    difficulty: 'middle',
    tags: ['sizes', 'srcset', 'viewport', 'оптимизация']
  },
  {
    id: 32,
    question: "Как бы вы оптимизировали загрузку изображений для Retina-дисплеев?",
    answer: "<p>Оптимизация для Retina-дисплеев требует <strong>баланса между качеством и производительностью</strong>:</p><h4>Использование srcset с дескриптором x:</h4><p>Предоставляйте изображения в нескольких разрешениях: 1x для обычных экранов, 2x для стандартных Retina, 3x для самых плотных дисплеев.</p><h4>Оптимизация размера файлов:</h4><p><strong>Сжатие:</strong> Retina-изображения можно сжимать сильнее без видимой потери качества из-за высокой плотности пикселей.</p><p><strong>Современные форматы:</strong> WebP и AVIF обеспечивают лучшее сжатие для высокоразрешенных изображений.</p><h4>Условная загрузка:</h4><p><strong>JavaScript определение:</strong> Проверяйте <code>window.devicePixelRatio</code> для динамической загрузки подходящих изображений.</p><p><strong>CSS медиа-запросы:</strong> Используйте <code>-webkit-device-pixel-ratio</code> для условной загрузки background-изображений.</p><h4>Стратегии оптимизации:</h4><ul><li>Lazy loading для неважных изображений</li><li>Прогрессивная загрузка (сначала 1x, потом 2x)</li><li>Кэширование на CDN</li><li>Автоматическая оптимизация через сервисы обработки изображений</li></ul><p><em>Цель:</em> четкие изображения без избыточной нагрузки на трафик.</p>",
    difficulty: 'middle',
    tags: ['retina', 'оптимизация', 'производительность', 'высокая плотность']
  },
  {
    id: 33,
    question: "Покажите, как реализовать lazy loading для изображений",
    answer: "<p><strong>Lazy loading</strong> — это техника отложенной загрузки изображений, которые находятся вне видимой области экрана, что значительно улучшает производительность страницы.</p><h4>Нативный lazy loading:</h4><p>HTML5 предоставляет встроенную поддержку через атрибут <code>loading='lazy'</code>. Браузер автоматически откладывает загрузку изображения до тех пор, пока оно не приблизится к viewport.</p><h4>Intersection Observer API:</h4><p>Для более точного контроля используется <strong>Intersection Observer</strong> — современный API для отслеживания видимости элементов. Он позволяет настроить пороги срабатывания и плавную загрузку.</p><h4>Стратегия реализации:</h4><p><strong>Placeholder изображения:</strong> Показывайте маленькие заглушки или размытые версии во время загрузки.</p><p><strong>Прогрессивная загрузка:</strong> Сначала загружайте изображения низкого качества, затем заменяйте на полноразмерные.</p><p><strong>Предзагрузка критических изображений:</strong> Изображения above the fold должны загружаться немедленно.</p><h4>Лучшие практики:</h4><ul><li>Резервируйте место для изображения, чтобы избежать layout shift</li><li>Используйте скелетоны или блюр-эффекты</li><li>Тестируйте на медленных соединениях</li></ul>",
    difficulty: 'middle',
    tags: ['lazy loading', 'производительность', 'intersection observer', 'оптимизация']
  },
  {
    id: 34,
    question: "Какие форматы изображений лучше использовать для веба?",
    answer: "<p>Выбор формата изображения влияет на <strong>качество, размер файла и совместимость</strong>:</p><h4>Традиционные форматы:</h4><p><strong>JPEG:</strong> Идеален для фотографий с множеством цветов. Хорошее сжатие с потерями, но не поддерживает прозрачность. Универсально поддерживается.</p><p><strong>PNG:</strong> Лучший выбор для изображений с прозрачностью, логотипов, иконок. Сжатие без потерь, но большие размеры файлов для фотографий.</p><p><strong>GIF:</strong> Устаревший формат, используется только для простых анимаций. Ограничен 256 цветами.</p><h4>Современные форматы:</h4><p><strong>WebP:</strong> Обеспечивает на 25-35% лучшее сжатие чем JPEG/PNG, поддерживает прозрачность и анимацию. Хорошая поддержка браузерами.</p><p><strong>AVIF:</strong> Новейший формат с превосходным сжатием (до 50% лучше JPEG), но ограниченная поддержка браузерами.</p><p><strong>SVG:</strong> Векторный формат, идеален для иконок, логотипов, простых изображений. Масштабируется без потери качества.</p><h4>Стратегия выбора:</h4><p>Используйте элемент <code>picture</code> для <em>прогрессивного улучшения</em>: предлагайте современные форматы с fallback на традиционные.</p>",
    difficulty: 'middle',
    tags: ['форматы изображений', 'WebP', 'AVIF', 'оптимизация', 'совместимость']
  },
  {
    id: 35,
    question: "Как работает WebP и когда его стоит использовать?",
    answer: "<p><strong>WebP</strong> — это современный формат изображений, разработанный Google, который обеспечивает лучшее сжатие при сохранении качества по сравнению с JPEG и PNG.</p><h4>Технические особенности:</h4><p><strong>Алгоритм сжатия:</strong> Использует предсказательное кодирование, основанное на VP8 видеокодеке, что обеспечивает более эффективное сжатие.</p><p><strong>Поддерживаемые возможности:</strong> Сжатие с потерями и без потерь, прозрачность (альфа-канал), анимация (как альтернатива GIF).</p><h4>Преимущества:</h4><ul><li>На 25-35% меньший размер файла по сравнению с JPEG</li><li>На 26% меньший размер по сравнению с PNG</li><li>Поддержка прозрачности лучше чем у JPEG</li><li>Лучшее качество анимации чем у GIF</li></ul><h4>Когда использовать:</h4><p><strong>Идеально для:</strong> Веб-сайтов, где критична производительность, мобильных приложений, изображений с большим количеством деталей.</p><p><strong>Не подходит:</strong> Когда нужна поддержка старых браузеров без fallback, для печати (лучше использовать PNG/JPEG).</p><h4>Поддержка браузерами:</h4><p>Хорошо поддерживается современными браузерами (95%+), но требует fallback стратегии для IE и старых версий Safari.</p>",
    difficulty: 'middle',
    tags: ['WebP', 'сжатие изображений', 'производительность', 'современные форматы']
  },
  {
    id: 36,
    question: "Что такое critical images и как их обрабатывать?",
    answer: "<p><strong>Critical images</strong> — это изображения, которые видны пользователю сразу при загрузке страницы, то есть находятся в области видимости (above the fold).</p><p>Эти изображения критически важны для первого впечатления пользователя и должны загружаться максимально быстро.</p><h4>Как обрабатывать critical images:</h4><p><strong>Приоритетная загрузка:</strong> Используйте атрибут <code>loading='eager'</code> или <code>fetchpriority='high'</code> для критически важных изображений.</p><p><strong>Preload:</strong> Добавляйте <code>&lt;link rel='preload' as='image' href='...'&gt;</code> в head для самых важных изображений.</p><p><strong>Оптимизация размера:</strong> Убедитесь, что критические изображения имеют правильный размер и оптимальный формат.</p><p><strong>Избегайте lazy loading:</strong> Не применяйте <code>loading='lazy'</code> к изображениям above the fold.</p><p><strong>Inline base64:</strong> Для очень маленьких критических изображений можно использовать inline base64.</p><p><em>Цель:</em> Обеспечить максимально быструю загрузку первого экрана для улучшения Core Web Vitals, особенно LCP (Largest Contentful Paint).</p>",
    difficulty: 'senior',
    tags: ['производительность', 'critical images', 'оптимизация', 'Core Web Vitals']
  },
  {
    id: 37,
    question: "Как семантическая разметка связана с доступностью сайта?",
    answer: "<p>Семантическая разметка и доступность <strong>тесно взаимосвязаны</strong> и взаимно усиливают друг друга:</p><h4>Структура для скрин-ридеров:</h4><p>Семантические элементы предоставляют <strong>контекст и значение</strong> для вспомогательных технологий. Элементы <code>nav</code>, <code>main</code>, <code>article</code> помогают скрин-ридерам создать карту страницы.</p><h4>Навигация:</h4><p>Правильная иерархия заголовков позволяет пользователям скрин-ридеров <strong>быстро переходить</strong> между разделами страницы.</p><h4>Роли элементов:</h4><p>Семантические элементы имеют <strong>встроенные ARIA-роли</strong>. Например, <code>button</code> автоматически имеет роль кнопки, <code>nav</code> — роль навигации.</p><h4>Клавиатурная навигация:</h4><p>Интерактивные семантические элементы автоматически включаются в <strong>tab order</strong> и поддерживают клавиатурное управление.</p><h4>Контекстные подсказки:</h4><p>Семантические элементы предоставляют <strong>дополнительную информацию</strong> о типе и назначении контента.</p><p><em>Вывод:</em> Семантическая разметка — это фундамент доступности. Правильное использование семантических элементов автоматически решает многие проблемы доступности.</p>",
    difficulty: 'senior',
    tags: ['семантика', 'доступность', 'скрин-ридеры', 'ARIA']
  },
  {
    id: 38,
    question: "Какие SEO-аспекты нужно учитывать при работе с изображениями?",
    answer: "<p>SEO-оптимизация изображений включает множество аспектов:</p><h4>Alt-атрибуты:</h4><p><strong>Описательный alt-текст</strong> помогает поисковым системам понять содержание изображения. Включайте ключевые слова естественным образом, но избегайте переспама.</p><h4>Имена файлов:</h4><p>Используйте <strong>описательные имена файлов</strong> с ключевыми словами, разделенными дефисами, вместо общих названий типа 'image1.jpg'.</p><h4>Размер и производительность:</h4><p><strong>Оптимизируйте размер файлов</strong> для быстрой загрузки. Медленные изображения негативно влияют на Core Web Vitals и рейтинг.</p><h4>Structured Data:</h4><p>Используйте <strong>микроразметку Schema.org</strong> для изображений товаров, рецептов, статей.</p><h4>Контекстное окружение:</h4><p>Размещайте изображения рядом с <strong>релевантным текстом</strong>. Подписи и окружающий контент помогают поисковым системам понять тему изображения.</p><h4>Современные форматы:</h4><p>Используйте <strong>WebP, AVIF</strong> с fallback для лучшей производительности.</p><p><strong>Sitemap:</strong> Добавляйте важные изображения в XML-sitemap для лучшей индексации.</p>",
    difficulty: 'middle',
    tags: ['SEO', 'изображения', 'оптимизация', 'производительность']
  },
  {
    id: 39,
    question: "Как обеспечить доступность при использовании адаптивных изображений?",
    answer: "<p>Адаптивные изображения требуют особого внимания к доступности:</p><h4>Alt-атрибуты:</h4><p><strong>Единый alt-текст</strong> для всех версий изображения в <code>srcset</code>. Описание должно отражать суть изображения, а не его технические характеристики.</p><h4>Picture element:</h4><p>При использовании <code>&lt;picture&gt;</code> alt-атрибут размещается только на <code>&lt;img&gt;</code>, не на <code>&lt;source&gt;</code>.</p><h4>Art Direction:</h4><p>Если разные версии изображения <strong>кардинально отличаются</strong> по композиции, убедитесь, что alt-текст все еще актуален для всех версий.</p><h4>Производительность:</h4><p><strong>Быстрая загрузка</strong> критически важна для пользователей скрин-ридеров — они ждут загрузки изображения, чтобы услышать alt-текст.</p><h4>Контрастность:</h4><p>Убедитесь, что <strong>текст поверх изображений</strong> остается читаемым на всех версиях изображения.</p><h4>Тестирование:</h4><p>Проверяйте доступность на <strong>разных устройствах</strong> и разрешениях, так как разные изображения могут по-разному влиять на восприятие контента.</p><p><em>Принцип:</em> Адаптивность не должна ухудшать доступность — все версии изображения должны быть одинаково доступными.</p>",
    difficulty: 'senior',
    tags: ['доступность', 'адаптивные изображения', 'alt-текст', 'производительность']
  },
  {
    id: 40,
    question: "Какие инструменты разработчика вы используете для анализа HTML?",
    answer: "<p>Для анализа HTML существует широкий спектр инструментов:</p><h4>Браузерные DevTools:</h4><p><strong>Elements панель</strong> в Chrome/Firefox для просмотра DOM-структуры, изменения атрибутов в реальном времени, анализа CSS-свойств.</p><p><strong>Lighthouse</strong> для комплексного аудита производительности, доступности, SEO.</p><p><strong>Accessibility панель</strong> для проверки доступности, контрастности, tab order.</p><h4>Валидаторы:</h4><p><strong>W3C Markup Validator</strong> для проверки синтаксиса HTML.</p><p><strong>Nu Html Checker</strong> для валидации HTML5.</p><h4>Расширения браузера:</h4><p><strong>axe DevTools</strong> для детального анализа доступности.</p><p><strong>WAVE</strong> для визуального анализа проблем доступности.</p><p><strong>SEO META in 1 CLICK</strong> для быстрой проверки метатегов.</p><h4>Онлайн-инструменты:</h4><p><strong>WebPageTest</strong> для анализа производительности загрузки.</p><p><strong>Screaming Frog</strong> для SEO-аудита структуры сайта.</p><p><em>Подход:</em> Использую комбинацию инструментов для получения полной картины качества HTML-кода.</p>",
    difficulty: 'middle',
    tags: ['инструменты', 'анализ', 'валидация', 'DevTools']
  },
  {
    id: 41,
    question: "Как тестировать адаптивные изображения в различных браузерах?",
    answer: "<p>Тестирование адаптивных изображений требует <strong>комплексного подхода</strong>:</p><h4>DevTools:</h4><p><strong>Device Mode</strong> в Chrome DevTools для эмуляции различных устройств и разрешений.</p><p><strong>Network throttling</strong> для проверки поведения на медленных соединениях.</p><p><strong>Изменение DPR</strong> (Device Pixel Ratio) для тестирования Retina-дисплеев.</p><h4>Реальные устройства:</h4><p><strong>Физическое тестирование</strong> на различных смартфонах, планшетах, мониторах с разной плотностью пикселей.</p><p><strong>BrowserStack или Sauce Labs</strong> для тестирования на множестве устройств удаленно.</p><h4>Проверка загрузки:</h4><p><strong>Network панель</strong> для отслеживания, какие изображения загружаются на разных разрешениях.</p><p><strong>Performance панель</strong> для анализа времени загрузки.</p><h4>Автоматизация:</h4><p><strong>Puppeteer или Playwright</strong> для автоматизированного тестирования на разных viewport.</p><p><strong>Visual regression testing</strong> для сравнения изображений на разных устройствах.</p><p><em>Важно:</em> Тестируйте не только размеры, но и форматы изображений, поддержку WebP, AVIF в разных браузерах.</p>",
    difficulty: 'senior',
    tags: ['тестирование', 'адаптивные изображения', 'браузеры', 'автоматизация']
  },
  {
    id: 42,
    question: "Расскажите о своем подходе к валидации HTML-кода",
    answer: "<p>Мой подход к валидации HTML основан на <strong>многоуровневой проверке</strong>:</p><h4>Автоматическая валидация:</h4><p><strong>Интеграция в workflow:</strong> Использую линтеры типа HTMLHint, html-validate в процессе разработки.</p><p><strong>Pre-commit hooks:</strong> Настраиваю автоматическую проверку перед коммитом.</p><p><strong>CI/CD:</strong> Включаю валидацию в pipeline сборки.</p><h4>Ручная проверка:</h4><p><strong>W3C Validator:</strong> Регулярно проверяю страницы через официальный валидатор W3C.</p><p><strong>Браузерные DevTools:</strong> Анализирую консоль на предмет ошибок HTML.</p><h4>Семантическая валидация:</h4><p><strong>Структурный анализ:</strong> Проверяю логичность иерархии заголовков, правильность использования семантических элементов.</p><p><strong>Доступность:</strong> Использую axe-core для проверки accessibility.</p><h4>Контекстная валидация:</h4><p><strong>Соответствие стандартам:</strong> Проверяю соответствие HTML5 спецификации.</p><p><strong>Best practices:</strong> Следую рекомендациям MDN и W3C.</p><p><em>Принцип:</em> Валидация должна быть непрерывным процессом, а не одноразовой проверкой.</p>",
    difficulty: 'senior',
    tags: ['валидация', 'качество кода', 'инструменты', 'процессы']
  },
  {
    id: 43,
    question: "Что вы знаете о Web Components и как они соотносятся с семантической разметкой?",
    answer: "<p><strong>Web Components</strong> — это набор веб-стандартов для создания переиспользуемых пользовательских элементов:</p><h4>Основные технологии:</h4><p><strong>Custom Elements:</strong> Позволяют создавать собственные HTML-элементы с пользовательским поведением.</p><p><strong>Shadow DOM:</strong> Обеспечивает инкапсуляцию стилей и разметки.</p><p><strong>HTML Templates:</strong> Позволяют определять фрагменты разметки для повторного использования.</p><h4>Связь с семантикой:</h4><p><strong>Расширение семантики:</strong> Web Components позволяют создавать семантически значимые элементы, которых нет в стандартном HTML.</p><p><strong>Сохранение доступности:</strong> Пользовательские элементы должны поддерживать ARIA-атрибуты и клавиатурную навигацию.</p><p><strong>Семантическая инкапсуляция:</strong> Каждый компонент может иметь собственную семантическую структуру.</p><h4>Вызовы:</h4><p><strong>SEO:</strong> Поисковые системы могут не понимать пользовательские элементы без дополнительной разметки.</p><p><strong>Доступность:</strong> Требуется дополнительная работа для обеспечения accessibility.</p><p><em>Будущее:</em> Web Components дополняют, а не заменяют семантическую разметку.</p>",
    difficulty: 'senior',
    tags: ['Web Components', 'семантика', 'доступность', 'стандарты']
  },
  {
    id: 44,
    question: "Как современные JavaScript-фреймворки влияют на семантику HTML?",
    answer: "<p>JavaScript-фреймворки оказывают <strong>значительное влияние</strong> на семантику HTML:</p><h4>Положительные аспекты:</h4><p><strong>Компонентный подход:</strong> Фреймворки типа React, Vue поощряют создание семантически значимых компонентов.</p><p><strong>Accessibility tools:</strong> Многие фреймворки предоставляют инструменты для работы с ARIA-атрибутами.</p><p><strong>Валидация:</strong> ESLint-правила для проверки семантики и доступности.</p><h4>Проблемы:</h4><p><strong>Div-soup:</strong> Злоупотребление div-обертками может ухудшить семантику.</p><p><strong>JavaScript-зависимость:</strong> Контент может быть недоступен без JavaScript.</p><p><strong>Hydration:</strong> Может возникать несоответствие между серверным и клиентским рендерингом.</p><h4>Решения:</h4><p><strong>SSR/SSG:</strong> Использование серверного рендеринга для улучшения семантики в HTML.</p><p><strong>Progressive Enhancement:</strong> Обеспечение базовой функциональности без JavaScript.</p><p><strong>Semantic components:</strong> Создание компонентов, которые генерируют правильную семантическую разметку.</p><p><em>Вывод:</em> Фреймворки могут как улучшать, так и ухудшать семантику — все зависит от подхода разработчика.</p>",
    difficulty: 'senior',
    tags: ['JavaScript', 'фреймворки', 'семантика', 'современная разработка']
  },
  {
    id: 45,
    question: "Какие новые возможности HTML появились в последнее время?",
    answer: "<p>В последние годы HTML получил множество новых возможностей:</p><h4>Новые элементы:</h4><p><strong>Dialog:</strong> Нативные модальные окна с встроенной поддержкой доступности.</p><p><strong>Details/Summary:</strong> Улучшенная поддержка для аккордеонов и раскрывающихся списков.</p><h4>Атрибуты изображений:</h4><p><strong>loading='lazy':</strong> Нативная ленивая загрузка изображений.</p><p><strong>decoding='async':</strong> Асинхронное декодирование изображений.</p><p><strong>fetchpriority:</strong> Контроль приоритета загрузки ресурсов.</p><h4>Формы:</h4><p><strong>Новые input types:</strong> color, date, datetime-local, month, week.</p><p><strong>Валидация:</strong> Улучшенные возможности встроенной валидации.</p><h4>Производительность:</h4><p><strong>Preload hints:</strong> Улучшенные возможности предзагрузки ресурсов.</p><p><strong>Critical resource hints:</strong> Оптимизация загрузки критически важных ресурсов.</p><h4>Доступность:</h4><p><strong>Inert атрибут:</strong> Для временного отключения интерактивности элементов.</p><p><strong>Popover API:</strong> Нативные всплывающие элементы.</p><p><em>Тренд:</em> HTML развивается в сторону большей интерактивности, производительности и доступности.</p>",
    difficulty: 'senior',
    tags: ['HTML', 'новые возможности', 'современные стандарты', 'производительность']
  }
];
