export interface InterviewQuestion {
  id: number
  question: string
  answer: string
  difficulty?: 'junior' | 'middle' | 'senior'
  tags?: string[]
}

export const jsInterviewQuestions: InterviewQuestion[] = [
  {
    id: 1,
    question: "Что такое функция в JavaScript и для чего она используется?",
    answer: "<p><strong>Функция</strong> — это блок кода, который можно многократно вызывать для выполнения определенной задачи. Функции являются основным строительным блоком JavaScript-программ.</p><p><strong>Основные назначения функций:</strong></p><ul><li><strong>Переиспользование кода:</strong> Один раз написанный код можно вызывать множество раз</li><li><strong>Модульность:</strong> Разбиение сложной задачи на более простые подзадачи</li><li><strong>Абстракция:</strong> Скрытие деталей реализации за простым интерфейсом</li><li><strong>Область видимости:</strong> Создание изолированного пространства для переменных</li></ul><p>Функции в JavaScript являются <em>объектами первого класса</em>, что означает, что их можно присваивать переменным, передавать как аргументы и возвращать из других функций.</p><p>Пример простой функции, которая складывает два числа и возвращает результат.</p>",
    difficulty: 'junior',
    tags: ['основы', 'функции', 'концепции']
  },
  {
    id: 2,
    question: "Какие способы объявления функций существуют в JavaScript?",
    answer: "<p>В JavaScript существует несколько способов создания функций:</p><h4>1. Function Declaration (Объявление функции):</h4><p>Классический способ объявления функции с ключевым словом <code>function</code>. Такие функции поднимаются (hoisting) и доступны во всей области видимости.</p><h4>2. Function Expression (Функциональное выражение):</h4><p>Функция создается как выражение и присваивается переменной. Не поднимается, доступна только после объявления.</p><h4>3. Arrow Function (Стрелочная функция):</h4><p>Краткий синтаксис ES6 для создания функций. Не имеет собственного контекста <code>this</code>.</p><h4>4. Function Constructor:</h4><p>Создание функции через конструктор <code>Function()</code>. Редко используется в практике.</p><h4>5. Method Definition:</h4><p>Краткий синтаксис для определения методов в объектах.</p><p>Каждый способ имеет свои особенности поведения, особенно касательно <strong>hoisting, this и arguments</strong>.</p>",
    difficulty: 'junior',
    tags: ['объявление функций', 'синтаксис', 'ES6']
  },
  {
    id: 3,
    question: "В чем разница между Function Declaration и Function Expression?",
    answer: "<p>Основные различия между Function Declaration и Function Expression:</p><h4>Function Declaration:</h4><ul><li><strong>Hoisting:</strong> Поднимается полностью, можно вызывать до объявления</li><li><strong>Синтаксис:</strong> Начинается с ключевого слова <code>function</code></li><li><strong>Имя:</strong> Обязательно должна иметь имя</li><li><strong>Область видимости:</strong> Доступна во всей области видимости, где объявлена</li></ul><h4>Function Expression:</h4><ul><li><strong>Hoisting:</strong> Переменная поднимается, но не значение. Нельзя вызвать до присваивания</li><li><strong>Синтаксис:</strong> Функция присваивается переменной</li><li><strong>Имя:</strong> Может быть анонимной или именованной</li><li><strong>Условное создание:</strong> Может создаваться условно внутри блоков</li></ul><h4>Практическое применение:</h4><p><strong>Function Declaration</strong> используется для основных функций программы, которые должны быть доступны везде.</p><p><strong>Function Expression</strong> используется для условного создания функций, callback'ов и когда функция нужна как значение.</p>",
    difficulty: 'junior',
    tags: ['function declaration', 'function expression', 'hoisting', 'различия']
  },
  {
    id: 4,
    question: "Что такое стрелочные функции и чем они отличаются от обычных?",
    answer: "<p><strong>Стрелочные функции</strong> — это краткий синтаксис ES6 для создания функций, введенный для упрощения написания кода.</p><h4>Основные отличия от обычных функций:</h4><h4>1. Контекст this:</h4><p><strong>Обычные функции:</strong> Имеют собственный контекст <code>this</code>, который определяется способом вызова.</p><p><strong>Стрелочные функции:</strong> Наследуют <code>this</code> из внешней области видимости, не создают собственный контекст.</p><h4>2. Объект arguments:</h4><p>Стрелочные функции не имеют собственного объекта <code>arguments</code>. Для доступа к параметрам используйте rest parameters.</p><h4>3. Hoisting:</h4><p>Стрелочные функции не поднимаются, так как являются выражениями.</p><h4>4. Конструктор:</h4><p>Стрелочные функции нельзя использовать как конструкторы с оператором <code>new</code>.</p><h4>5. Синтаксис:</h4><p>Более краткий синтаксис, особенно для простых функций. Неявный возврат для выражений.</p><p><em>Стрелочные функции идеальны для callback'ов и функций, где не нужен собственный контекст.</em></p>",
    difficulty: 'middle',
    tags: ['arrow functions', 'ES6', 'this', 'различия']
  },
  {
    id: 5,
    question: "Что такое hoisting в контексте функций?",
    answer: "<p><strong>Hoisting</strong> — это механизм JavaScript, при котором объявления переменных и функций \"поднимаются\" в начало их области видимости во время компиляции.</p><h4>Поведение разных типов функций:</h4><h4>Function Declaration:</h4><p><strong>Полное поднятие:</strong> И объявление, и определение поднимаются. Функцию можно вызвать до её объявления в коде.</p><h4>Function Expression:</h4><p><strong>Частичное поднятие:</strong> Поднимается только объявление переменной (как <code>undefined</code>), но не присваивание функции.</p><h4>Arrow Functions:</h4><p>Ведут себя как Function Expression — поднимается только переменная.</p><h4>Переменные let/const:</h4><p>Функции, объявленные через <code>let</code> или <code>const</code>, находятся в \"temporal dead zone\" до момента объявления.</p><h4>Практическое значение:</h4><p>Понимание hoisting помогает избежать ошибок и писать более предсказуемый код. <em>Рекомендуется объявлять функции до их использования</em> для лучшей читаемости.</p>",
    difficulty: 'middle',
    tags: ['hoisting', 'область видимости', 'temporal dead zone']
  },
  {
    id: 6,
    question: "Что такое замыкания (closures) и как они работают с функциями?",
    answer: "<p><strong>Замыкание (closure)</strong> — это комбинация функции и лексического окружения, в котором эта функция была определена. Замыкание дает функции доступ к переменным внешней области видимости даже после завершения выполнения внешней функции.</p><h4>Как работают замыкания:</h4><p><strong>Лексическая область видимости:</strong> JavaScript использует лексическую область видимости, что означает, что функции имеют доступ к переменным, определенным в области, где они были созданы.</p><p><strong>Сохранение контекста:</strong> Когда функция возвращается из другой функции, она \"запоминает\" переменные из внешней области.</p><h4>Практические применения:</h4><ul><li><strong>Приватные переменные:</strong> Создание переменных, недоступных извне</li><li><strong>Фабрики функций:</strong> Создание специализированных функций</li><li><strong>Модули:</strong> Создание модульной структуры кода</li><li><strong>Callback функции:</strong> Сохранение состояния в асинхронных операциях</li></ul><p><em>Замыкания — это мощный механизм, который делает JavaScript функциональным языком программирования.</em></p>",
    difficulty: 'middle',
    tags: ['замыкания', 'лексическая область', 'приватные переменные']
  },
  {
    id: 7,
    question: "Что такое функции высшего порядка (Higher-Order Functions)?",
    answer: "<p><strong>Функции высшего порядка</strong> — это функции, которые принимают другие функции в качестве аргументов или возвращают функции как результат.</p><h4>Два типа функций высшего порядка:</h4><h4>1. Принимают функции как аргументы:</h4><p>Такие функции позволяют передавать поведение как параметр, делая код более гибким и переиспользуемым.</p><h4>2. Возвращают функции:</h4><p>Эти функции создают и возвращают новые функции, часто с использованием замыканий.</p><h4>Встроенные функции высшего порядка:</h4><ul><li><strong>Array.map():</strong> Применяет функцию к каждому элементу массива</li><li><strong>Array.filter():</strong> Фильтрует элементы на основе условия</li><li><strong>Array.reduce():</strong> Сворачивает массив к одному значению</li><li><strong>setTimeout/setInterval:</strong> Принимают функции для отложенного выполнения</li></ul><h4>Преимущества:</h4><ul><li>Более абстрактный и выразительный код</li><li>Лучшая переиспользуемость</li><li>Функциональный стиль программирования</li><li>Композиция функций</li></ul><p><em>Функции высшего порядка — основа функционального программирования в JavaScript.</em></p>",
    difficulty: 'middle',
    tags: ['высшего порядка', 'функциональное программирование', 'callback']
  },
  {
    id: 8,
    question: "Что такое IIFE (Immediately Invoked Function Expression)?",
    answer: "<p><strong>IIFE</strong> — это функция, которая выполняется сразу же после её создания. Это паттерн, позволяющий создать изолированную область видимости.</p><h4>Синтаксис IIFE:</h4><p>Существует два основных способа записи: с круглыми скобками вокруг всего выражения или только вокруг функции.</p><h4>Зачем используется IIFE:</h4><h4>1. Изоляция области видимости:</h4><p>Предотвращает загрязнение глобального пространства имен.</p><h4>2. Создание модулей:</h4><p>До появления ES6 модулей IIFE был основным способом создания модульной структуры.</p><h4>3. Инициализация:</h4><p>Выполнение кода инициализации, который должен запуститься только один раз.</p><h4>4. Приватность:</h4><p>Создание приватных переменных и методов.</p><h4>Варианты записи:</h4><p>Стрелочные функции также могут быть IIFE, хотя синтаксис менее читаемый.</p><p><strong>Современное применение:</strong> С появлением ES6 модулей и блочной области видимости <code>let/const</code> IIFE используется реже, но остается полезным для совместимости и специфических случаев.</p>",
    difficulty: 'middle',
    tags: ['IIFE', 'область видимости', 'модули', 'паттерны']
  },
  {
    id: 9,
    question: "Объясните разницу между параметрами и аргументами функции",
    answer: "<p>Часто эти термины используются взаимозаменяемо, но у них есть четкое различие:</p><h4>Параметры (Parameters):</h4><ul><li><strong>Определение:</strong> Переменные, указанные в объявлении функции</li><li><strong>Местоположение:</strong> Находятся в круглых скобках при объявлении функции</li><li><strong>Назначение:</strong> Определяют, какие значения функция ожидает получить</li><li><strong>Время существования:</strong> Существуют только внутри функции</li></ul><h4>Аргументы (Arguments):</h4><ul><li><strong>Определение:</strong> Фактические значения, передаваемые функции при вызове</li><li><strong>Местоположение:</strong> Передаются в круглых скобках при вызове функции</li><li><strong>Назначение:</strong> Конкретные данные для обработки функцией</li><li><strong>Типы:</strong> Могут быть любого типа данных</li></ul><h4>Особенности JavaScript:</h4><p><strong>Гибкость:</strong> Количество аргументов может не совпадать с количеством параметров.</p><p><strong>Объект arguments:</strong> В обычных функциях доступен объект <code>arguments</code> со всеми переданными аргументами.</p><p><strong>Значения по умолчанию:</strong> Параметры могут иметь значения по умолчанию (ES6).</p>",
    difficulty: 'junior',
    tags: ['параметры', 'аргументы', 'синтаксис', 'основы']
  },
  {
    id: 10,
    question: "Что такое rest параметры и spread оператор в функциях?",
    answer: "<p><strong>Rest параметры</strong> и <strong>spread оператор</strong> используют одинаковый синтаксис (<code>...</code>), но в разных контекстах:</p><h4>Rest параметры (...):</h4><p><strong>Назначение:</strong> Собирает несколько аргументов в массив внутри функции.</p><p><strong>Использование:</strong> Только в объявлении функции, только как последний параметр.</p><p><strong>Преимущества:</strong> Заменяет объект <code>arguments</code>, работает со стрелочными функциями, возвращает настоящий массив.</p><h4>Spread оператор (...):</h4><p><strong>Назначение:</strong> Разворачивает массив или итерируемый объект в отдельные элементы.</p><p><strong>Использование:</strong> При вызове функции, в массивах, объектах.</p><p><strong>Применение:</strong> Передача элементов массива как отдельных аргументов.</p><h4>Различия:</h4><ul><li><strong>Rest:</strong> Собирает много в одно (массив)</li><li><strong>Spread:</strong> Разбирает одно на много (элементы)</li></ul><p><em>Оба оператора делают работу с переменным количеством параметров более удобной и читаемой.</em></p>",
    difficulty: 'middle',
    tags: ['rest параметры', 'spread оператор', 'ES6', 'аргументы']
  },
  {
    id: 11,
    question: "Что такое bind, call и apply? В чем их различия?",
    answer: "<p>Это методы для управления контекстом <code>this</code> при вызове функций:</p><h4>call():</h4><p><strong>Назначение:</strong> Вызывает функцию с заданным контекстом <code>this</code> и аргументами.</p><p><strong>Синтаксис:</strong> Аргументы передаются через запятую.</p><p><strong>Выполнение:</strong> Функция выполняется немедленно.</p><h4>apply():</h4><p><strong>Назначение:</strong> То же, что и <code>call</code>, но аргументы передаются массивом.</p><p><strong>Синтаксис:</strong> Второй параметр — массив аргументов.</p><p><strong>Использование:</strong> Удобно, когда аргументы уже в виде массива.</p><h4>bind():</h4><p><strong>Назначение:</strong> Создает новую функцию с привязанным контекстом <code>this</code>.</p><p><strong>Выполнение:</strong> Возвращает новую функцию, не выполняя исходную.</p><p><strong>Частичное применение:</strong> Может частично применять аргументы.</p><h4>Основные различия:</h4><ul><li><strong>call/apply:</strong> Выполняют функцию сразу</li><li><strong>bind:</strong> Возвращает новую функцию для последующего вызова</li><li><strong>call:</strong> Аргументы через запятую</li><li><strong>apply:</strong> Аргументы массивом</li></ul>",
    difficulty: 'middle',
    tags: ['bind', 'call', 'apply', 'this', 'контекст']
  },
  {
    id: 12,
    question: "Что такое currying (каррирование) функций?",
    answer: "<p><strong>Каррирование</strong> — это техника преобразования функции с несколькими аргументами в последовательность функций, каждая из которых принимает один аргумент.</p><h4>Принцип работы:</h4><p>Функция, принимающая несколько аргументов, преобразуется в функцию, которая принимает первый аргумент и возвращает функцию для следующего аргумента, и так далее.</p><h4>Преимущества каррирования:</h4><h4>1. Частичное применение:</h4><p>Можно создавать специализированные функции, зафиксировав некоторые аргументы.</p><h4>2. Переиспользование:</h4><p>Создание функций с предустановленными параметрами.</p><h4>3. Композиция:</p><p>Легче комбинировать каррированные функции.</p><h4>4. Читаемость:</h4><p>Более декларативный стиль программирования.</p><h4>Реализация:</h4><p>Можно реализовать вручную через замыкания или использовать библиотеки типа Lodash.</p><h4>Применение:</h4><p>Особенно полезно в функциональном программировании, при создании конфигурируемых функций и в библиотеках вроде Redux.</p><p><em>Каррирование — мощная техника для создания более гибких и переиспользуемых функций.</em></p>",
    difficulty: 'senior',
    tags: ['каррирование', 'функциональное программирование', 'замыкания']
  },
  {
    id: 13,
    question: "Что такое чистые функции (pure functions) и побочные эффекты?",
    answer: "<p><strong>Чистая функция</strong> — это функция, которая всегда возвращает одинаковый результат для одинаковых входных данных и не производит побочных эффектов.</p><h4>Критерии чистой функции:</h4><h4>1. Детерминированность:</h4><p>Одинаковый входной параметр всегда дает одинаковый результат.</p><h4>2. Отсутствие побочных эффектов:</h4><p>Функция не изменяет внешнее состояние программы.</p><h4>Побочные эффекты:</h4><ul><li>Изменение глобальных переменных</li><li>Изменение переданных объектов/массивов</li><li>Обращение к DOM</li><li>HTTP-запросы</li><li>Вывод в консоль</li><li>Генерация случайных чисел</li><li>Получение текущего времени</li></ul><h4>Преимущества чистых функций:</h4><ul><li><strong>Предсказуемость:</strong> Легко понять, что делает функция</li><li><strong>Тестируемость:</strong> Проще написать тесты</li><li><strong>Отладка:</strong> Легче найти и исправить ошибки</li><li><strong>Кэширование:</strong> Можно кэшировать результаты (memoization)</li><li><strong>Параллелизм:</strong> Безопасны для параллельного выполнения</li></ul><p><em>Стремитесь к написанию чистых функций, когда это возможно — это основа надежного кода.</em></p>",
    difficulty: 'senior',
    tags: ['чистые функции', 'побочные эффекты', 'функциональное программирование']
  },
  {
    id: 14,
    question: "Что такое мемоизация (memoization) и как её реализовать?",
    answer: "<p><strong>Мемоизация</strong> — это техника оптимизации, при которой результаты выполнения функции кэшируются, чтобы избежать повторных вычислений для одинаковых входных данных.</p><h4>Принцип работы:</h4><ol><li>При первом вызове функции с определенными аргументами результат вычисляется и сохраняется</li><li>При последующих вызовах с теми же аргументами возвращается сохраненный результат</li><li>Время выполнения уменьшается с O(n) до O(1) для повторных вызовов</li></ol><h4>Когда применять:</h4><ul><li><strong>Дорогие вычисления:</strong> Функции с высокой вычислительной сложностью</li><li><strong>Рекурсивные функции:</strong> Например, вычисление чисел Фибоначчи</li><li><strong>Частые повторные вызовы:</strong> С одинаковыми параметрами</li><li><strong>Чистые функции:</strong> Результат зависит только от входных параметров</li></ul><h4>Ограничения:</h4><ul><li>Использует дополнительную память для хранения кэша</li><li>Подходит только для чистых функций</li><li>Может быть неэффективна для функций с большим количеством уникальных аргументов</li></ul><p><em>Мемоизация — мощный инструмент оптимизации, но используйте её осознанно, учитывая баланс между скоростью и памятью.</em></p>",
    difficulty: 'senior',
    tags: ['мемоизация', 'оптимизация', 'кэширование', 'производительность']
  },
  {
    id: 15,
    question: "Как работает контекст выполнения функций и call stack?",
    answer: "<p><strong>Контекст выполнения</strong> — это абстрактная концепция, описывающая среду, в которой выполняется JavaScript код.</p><h4>Типы контекстов выполнения:</h4><h4>1. Глобальный контекст:</h4><p>Создается при загрузке скрипта, существует один на всю программу.</p><h4>2. Контекст функции:</h4><p>Создается при каждом вызове функции.</p><h4>3. Eval контекст:</h4><p>Создается при выполнении кода в <code>eval()</code>.</p><h4>Фазы создания контекста:</h4><h4>1. Creation Phase (Фаза создания):</h4><ul><li>Создание лексического окружения</li><li>Создание переменного окружения</li><li>Определение значения <code>this</code></li><li>Hoisting переменных и функций</li></ul><h4>2. Execution Phase (Фаза выполнения):</h4><ul><li>Выполнение кода построчно</li><li>Присваивание значений переменным</li></ul><h4>Call Stack (Стек вызовов):</h4><p><strong>Принцип работы:</strong> LIFO (Last In, First Out) — последний зашедший, первый вышедший.</p><p><strong>Процесс:</strong> При вызове функции её контекст добавляется в стек, при завершении — удаляется.</p><p><em>Понимание контекста выполнения помогает разобраться в hoisting, замыканиях и области видимости.</em></p>",
    difficulty: 'senior',
    tags: ['контекст выполнения', 'call stack', 'лексическое окружение', 'hoisting']
  }
];
