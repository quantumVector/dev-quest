import type { Question } from '@/types/question.ts'

export const cssInJsQuestions: Question[] = [
  {
    id: 1,
    question: "Какое главное преимущество CSS-in-JS подхода по сравнению с традиционным CSS?",
    options: [
      "Лучшая производительность браузера",
      "Динамические стили на основе пропсов компонентов",
      "Меньший размер бандла",
      "Поддержка всех браузеров без полифиллов"
    ],
    correctAnswer: 1,
    explanation: "CSS-in-JS позволяет создавать динамические стили, которые могут изменяться в зависимости от пропсов, состояния компонента или других JavaScript переменных, что невозможно с традиционным CSS.",
    topic: "CSS-in-JS"
  },
  {
    id: 2,
    question: "В чем основное различие между runtime и compile-time CSS-in-JS библиотеками?",
    options: [
      "Runtime быстрее выполняется в браузере",
      "Compile-time генерирует CSS во время сборки, runtime - в браузере",
      "Runtime поддерживает больше CSS свойств",
      "Compile-time работает только с React"
    ],
    correctAnswer: 1,
    explanation: "Compile-time библиотеки (например, Linaria, vanilla-extract) генерируют статический CSS во время сборки, а runtime библиотеки (styled-components, emotion) создают стили в браузере во время выполнения.",
    topic: "CSS-in-JS"
  },
  {
    id: 3,
    question: "Какая из перечисленных библиотек НЕ является CSS-in-JS решением?",
    options: [
      "styled-components",
      "Emotion",
      "Tailwind CSS",
      "JSS"
    ],
    correctAnswer: 2,
    explanation: "Tailwind CSS - это utility-first CSS фреймворк, который использует готовые классы, а не генерирует стили в JavaScript. Остальные являются CSS-in-JS библиотеками.",
    topic: "CSS-in-JS"
  },
  {
    id: 4,
    question: "Какая потенциальная проблема может возникнуть при использовании runtime CSS-in-JS библиотек?",
    options: [
      "Невозможность использования псевдоклассов",
      "Блокировка рендеринга до загрузки CSS",
      "Отсутствие поддержки медиа-запросов",
      "Конфликт стилей между компонентами"
    ],
    correctAnswer: 1,
    explanation: "Runtime CSS-in-JS может блокировать рендеринг, поскольку стили генерируются и внедряются в DOM во время выполнения JavaScript, что может создать задержку до отображения контента (FOUC - Flash of Unstyled Content).",
    topic: "CSS-in-JS"
  },
  {
    id: 5,
    question: "Какой подход использует библиотека styled-components для создания стилизованных компонентов?",
    options: [
      "CSS классы с автоматически генерируемыми именами",
      "Inline стили через атрибут style",
      "Template literals с CSS синтаксисом",
      "JSON объекты со стилями"
    ],
    correctAnswer: 2,
    explanation: "styled-components использует tagged template literals, что позволяет писать CSS синтаксис внутри JavaScript, создавая новые React компоненты с встроенными стилями.",
    topic: "CSS-in-JS"
  },
  {
    id: 6,
    question: "Что такое 'critical CSS' в контексте CSS-in-JS?",
    options: [
      "CSS для критически важных элементов страницы",
      "Стили, которые необходимы для первоначального рендеринга",
      "CSS с высокой специфичностью",
      "Стили для обработки ошибок"
    ],
    correctAnswer: 1,
    explanation: "Critical CSS - это минимальный набор стилей, необходимый для рендеринга видимой части страницы (above-the-fold). В CSS-in-JS это помогает оптимизировать загрузку, отправляя только необходимые стили для первоначального рендеринга.",
    topic: "CSS-in-JS"
  },
  {
    id: 7,
    question: "Какое преимущество дает использование CSS-in-JS при работе с темизацией (theming)?",
    options: [
      "Автоматическая генерация темных тем",
      "Динамическое переключение тем без перезагрузки CSS",
      "Меньший размер файлов тем",
      "Лучшая поддержка старых браузеров"
    ],
    correctAnswer: 1,
    explanation: "CSS-in-JS позволяет динамически изменять темы через JavaScript без необходимости загружать новые CSS файлы, так как стили генерируются в runtime на основе текущих значений темы.",
    topic: "CSS-in-JS"
  },
  {
    id: 8,
    question: "Что означает 'atomic CSS' в контексте CSS-in-JS библиотек?",
    options: [
      "CSS с использованием !important",
      "Очень маленькие CSS правила для одного свойства",
      "CSS без использования каскада",
      "CSS для атомарных операций"
    ],
    correctAnswer: 1,
    explanation: "Atomic CSS подразумевает создание множества маленьких CSS классов, каждый из которых применяет одно или очень небольшое количество CSS свойств. Это подход используют библиотеки как Tailwind CSS или некоторые CSS-in-JS решения.",
    topic: "CSS-in-JS"
  },
  {
    id: 9,
    question: "Какая из библиотек является примером compile-time CSS-in-JS решения?",
    options: [
      "styled-components",
      "Emotion",
      "Linaria",
      "Aphrodite"
    ],
    correctAnswer: 2,
    explanation: "Linaria - это compile-time CSS-in-JS библиотека, которая извлекает CSS во время сборки и генерирует статические CSS файлы, в отличие от runtime библиотек как styled-components или Emotion.",
    topic: "CSS-in-JS"
  },
  {
    id: 10,
    question: "Что такое 'CSS-in-JS with zero runtime'?",
    options: [
      "CSS-in-JS без использования JavaScript",
      "Библиотеки, которые не добавляют код в финальный бандл",
      "CSS-in-JS без поддержки динамических стилей",
      "Статическая генерация CSS во время сборки"
    ],
    correctAnswer: 3,
    explanation: "Zero runtime CSS-in-JS означает, что весь CSS извлекается и генерируется во время сборки (build time), не добавляя JavaScript код для создания стилей в браузере. Примеры: Linaria, vanilla-extract.",
    topic: "CSS-in-JS"
  },
  {
    id: 11,
    question: "Какая проблема решается с помощью CSS-in-JS при работе с компонентами?",
    options: [
      "Медленная загрузка стилей",
      "Глобальное пространство имен CSS",
      "Отсутствие поддержки Flexbox",
      "Невозможность использования переменных"
    ],
    correctAnswer: 1,
    explanation: "CSS-in-JS решает проблему глобального пространства имен CSS, автоматически изолируя стили компонентов и предотвращая конфликты между различными частями приложения.",
    topic: "CSS-in-JS"
  },
  {
    id: 12,
    question: "Как CSS-in-JS библиотеки обычно решают проблему dead code elimination для стилей?",
    options: [
      "Через статический анализ unused стилей",
      "Автоматически удаляют неиспользуемые стили при сборке",
      "Стили привязаны к компонентам и удаляются вместе с ними",
      "Требуют ручной очистки неиспользуемых стилей"
    ],
    correctAnswer: 2,
    explanation: "В CSS-in-JS стили тесно связаны с компонентами, поэтому когда компонент не используется в приложении, его стили также автоматически исключаются из финального бандла, решая проблему мертвого кода.",
    topic: "CSS-in-JS"
  },
  {
    id: 13,
    question: "Какой недостаток может быть у runtime CSS-in-JS при Server-Side Rendering (SSR)?",
    options: [
      "Невозможность рендерить стили на сервере",
      "Гидратация может вызвать Flash of Unstyled Content (FOUC)",
      "Стили не передаются клиенту",
      "Медленная работа сервера"
    ],
    correctAnswer: 1,
    explanation: "При SSR с runtime CSS-in-JS может возникнуть FOUC, когда сервер отправляет HTML без стилей, а стили генерируются только после загрузки и выполнения JavaScript на клиенте, что создает задержку в отображении стилизованного контента.",
    topic: "CSS-in-JS"
  },
  {
    id: 14,
    question: "Что такое 'style injection' в контексте CSS-in-JS?",
    options: [
      "Внедрение вредоносного CSS кода",
      "Добавление стилей в DOM через JavaScript",
      "Импорт внешних CSS файлов",
      "Копирование стилей между компонентами"
    ],
    correctAnswer: 1,
    explanation: "Style injection - это процесс динамического добавления CSS правил в DOM через JavaScript, который используется runtime CSS-in-JS библиотеками для применения стилей к компонентам.",
    topic: "CSS-in-JS"
  },
  {
    id: 15,
    question: "Какое преимущество дает использование TypeScript с CSS-in-JS?",
    options: [
      "Автоматическая генерация CSS",
      "Типизация стилей и theme объектов",
      "Лучшая производительность рендеринга",
      "Поддержка всех CSS свойств"
    ],
    correctAnswer: 1,
    explanation: "TypeScript с CSS-in-JS обеспечивает типизацию стилей, theme объектов и пропсов компонентов, что позволяет выявлять ошибки на этапе разработки и улучшает автодополнение в IDE.",
    topic: "CSS-in-JS"
  },
  {
    id: 16,
    question: "Что такое 'CSS prop' в библиотеках как Emotion?",
    options: [
      "Специальное CSS свойство для анимаций",
      "Проп для передачи стилей напрямую в JSX элементы",
      "CSS переменная в JavaScript",
      "Метод для создания CSS классов"
    ],
    correctAnswer: 1,
    explanation: "CSS prop позволяет писать стили напрямую в JSX элементах, например <div css={styles}>, что дает более прямой способ применения стилей без создания styled компонентов.",
    topic: "CSS-in-JS"
  },
  {
    id: 17,
    question: "Какой фактор НЕ следует учитывать при выборе между runtime и compile-time CSS-in-JS?",
    options: [
      "Требования к производительности",
      "Необходимость динамических стилей",
      "Размер команды разработчиков",
      "Настройка сборки проекта"
    ],
    correctAnswer: 2,
    explanation: "Размер команды разработчиков не является техническим фактором при выборе CSS-in-JS подхода. Важнее учитывать производительность, потребность в динамических стилях и сложность настройки сборки.",
    topic: "CSS-in-JS"
  },
  {
    id: 18,
    question: "Как CSS-in-JS библиотеки обычно обеспечивают автопрефиксинг?",
    options: [
      "Встроенная поддержка всех префиксов",
      "Интеграция с PostCSS и autoprefixer",
      "Ручное добавление префиксов разработчиком",
      "Автоматическое определение браузера пользователя"
    ],
    correctAnswer: 1,
    explanation: "Большинство CSS-in-JS библиотек интегрируются с PostCSS и autoprefixer плагинами для автоматического добавления вендорных префиксов, или имеют встроенную поддержку автопрефиксинга.",
    topic: "CSS-in-JS"
  },
  {
    id: 19,
    question: "Что означает 'co-location' в контексте CSS-in-JS?",
    options: [
      "Размещение CSS файлов в одной папке",
      "Хранение стилей рядом с компонентом, который их использует",
      "Использование одинаковых стилей в разных компонентах",
      "Группировка стилей по функциональности"
    ],
    correctAnswer: 1,
    explanation: "Co-location означает размещение стилей непосредственно рядом с компонентом (в том же файле или папке), что упрощает поиск, изменение и удаление стилей вместе с соответствующим компонентом.",
    topic: "CSS-in-JS"
  },
  {
    id: 20,
    question: "Какая стратегия кэширования чаще всего используется в CSS-in-JS библиотеках?",
    options: [
      "Кэширование на уровне браузера",
      "Кэширование сгенерированных CSS правил по hash ключу",
      "Кэширование в localStorage",
      "Кэширование на сервере"
    ],
    correctAnswer: 1,
    explanation: "CSS-in-JS библиотеки обычно кэшируют сгенерированные CSS правила, используя hash от содержимого стилей как ключ, чтобы избежать повторной генерации одинаковых стилей и улучшить производительность.",
    topic: "CSS-in-JS"
  },
  {
    id: 21,
    question: "Какой механизм используется для предотвращения повторного создания стилей при ре-рендере компонента?",
    options: [
      "Мемоизация стилей по зависимостям",
      "Кэширование в sessionStorage",
      "Автоматическая дедупликация браузером",
      "Использование useCallback для стилей"
    ],
    correctAnswer: 0,
    explanation: "CSS-in-JS библиотеки используют мемоизацию стилей на основе их зависимостей (пропсы, состояние), чтобы избежать повторного создания одинаковых CSS правил при каждом рендере компонента.",
    topic: "CSS-in-JS"
  },
  {
    id: 22,
    question: "Что такое 'style deduplication' в контексте CSS-in-JS?",
    options: [
      "Удаление дублирующихся CSS свойств",
      "Объединение одинаковых CSS правил в один класс",
      "Сжатие CSS кода",
      "Минификация селекторов"
    ],
    correctAnswer: 1,
    explanation: "Style deduplication - это процесс обнаружения и объединения одинаковых CSS правил в один класс, чтобы избежать дублирования кода и уменьшить размер генерируемого CSS.",
    topic: "CSS-in-JS"
  },
  {
    id: 23,
    question: "Какая проблема может возникнуть при использовании большого количества динамических стилей в runtime CSS-in-JS?",
    options: [
      "Переполнение памяти браузера",
      "Создание слишком большого количества <style> тегов",
      "Конфликты CSS селекторов",
      "Блокировка главного потока браузера"
    ],
    correctAnswer: 1,
    explanation: "При большом количестве уникальных динамических стилей runtime CSS-in-JS может создавать множество <style> тегов в DOM, что может негативно повлиять на производительность и превысить лимиты браузера.",
    topic: "CSS-in-JS"
  },

  // Вопросы по архитектуре и паттернам
  {
    id: 24,
    question: "Что такое 'compound components' паттерн в контексте styled-components?",
    options: [
      "Компоненты, которые используют несколько CSS библиотек",
      "Группа связанных компонентов, работающих вместе",
      "Компоненты с множественным наследованием стилей",
      "Компоненты, объединяющие CSS и JavaScript"
    ],
    correctAnswer: 1,
    explanation: "Compound components - это паттерн, где несколько связанных компонентов работают вместе для создания более сложного UI элемента, часто используется с styled-components для создания составных интерфейсов.",
    topic: "CSS-in-JS"
  },
  {
    id: 25,
    question: "Как правильно организовать переиспользуемые стили в CSS-in-JS приложении?",
    options: [
      "Создать глобальные CSS классы",
      "Использовать design tokens и theme providers",
      "Копировать стили между компонентами",
      "Создать один большой styled компонент"
    ],
    correctAnswer: 1,
    explanation: "Design tokens и theme providers позволяют централизованно управлять переиспользуемыми значениями (цвета, размеры, шрифты) и обеспечивают консистентность дизайна во всем приложении.",
    topic: "CSS-in-JS"
  },
  {
    id: 26,
    question: "Что такое 'style composition' в CSS-in-JS и как она реализуется?",
    options: [
      "Объединение нескольких CSS файлов",
      "Наследование стилей от базовых компонентов",
      "Автоматическое применение глобальных стилей",
      "Создание CSS миксинов"
    ],
    correctAnswer: 1,
    explanation: "Style composition позволяет создавать новые styled компоненты на основе существующих, наследуя их стили и расширяя функциональность, например: styled(BaseButton)`additional styles`.",
    topic: "CSS-in-JS"
  },

  // Вопросы по интеграции с фреймворками
  {
    id: 27,
    question: "Какая особенность работы с CSS-in-JS в Next.js требует дополнительной настройки?",
    options: [
      "Настройка Babel плагинов для SSR",
      "Подключение дополнительных полифиллов",
      "Конфигурация Webpack лоадеров",
      "Установка специальных типов TypeScript"
    ],
    correctAnswer: 0,
    explanation: "Для корректной работы styled-components и других CSS-in-JS библиотек с SSR в Next.js необходимо настроить Babel плагины для сериализации стилей на сервере и их гидратации на клиенте.",
    topic: "CSS-in-JS"
  },
  {
    id: 28,
    question: "Как CSS-in-JS библиотеки обрабатывают стили в React Strict Mode?",
    options: [
      "Отключают строгий режим автоматически",
      "Используют специальные хуки для избежания двойного рендера",
      "Игнорируют повторные вызовы создания стилей",
      "Требуют дополнительной настройки для совместимости"
    ],
    correctAnswer: 1,
    explanation: "В React Strict Mode компоненты могут рендериться дважды, поэтому CSS-in-JS библиотеки используют специальные механизмы (например, useMemo, useLayoutEffect) для корректной обработки стилей.",
    topic: "CSS-in-JS"
  },

  // Вопросы по тестированию
  {
    id: 29,
    question: "Какой подход лучше всего подходит для тестирования styled-components?",
    options: [
      "Тестирование снимков (snapshot testing) generated CSS",
      "Тестирование применённых CSS свойств через DOM API",
      "Визуальное тестирование с помощью скриншотов",
      "Юнит-тестирование функций создания стилей"
    ],
    correctAnswer: 1,
    explanation: "Лучший подход - тестировать фактические CSS свойства, применённые к DOM элементам, используя методы типа getComputedStyle или testing-library утилиты для проверки стилей.",
    topic: "CSS-in-JS"
  },
  {
    id: 30,
    question: "Какая проблема может возникнуть при тестировании компонентов с динамическими CSS-in-JS стилями?",
    options: [
      "Невозможность замокать styled-components",
      "Генерация разных class names в разных запусках тестов",
      "Отсутствие поддержки в Jest",
      "Медленное выполнение тестов"
    ],
    correctAnswer: 1,
    explanation: "CSS-in-JS библиотеки генерируют уникальные class names, которые могут отличаться между запусками тестов, что требует использования специальных конфигураций или подходов к тестированию.",
    topic: "CSS-in-JS"
  },

  // Вопросы по миграции и совместимости
  {
    id: 31,
    question: "Какая стратегия миграции с обычного CSS на CSS-in-JS наиболее безопасна?",
    options: [
      "Полная замена всех стилей за один раз",
      "Постепенная миграция компонент за компонентом",
      "Использование CSS Modules как промежуточный этап",
      "Автоматическая конвертация с помощью codemod"
    ],
    correctAnswer: 1,
    explanation: "Постепенная миграция позволяет минимизировать риски, тестировать изменения пошагово и поддерживать работоспособность приложения в процессе перехода на новую архитектуру стилей.",
    topic: "CSS-in-JS"
  },
  {
    id: 32,
    question: "Как можно интегрировать существующие CSS библиотеки (например, Bootstrap) с CSS-in-JS?",
    options: [
      "Полностью переписать библиотеку в CSS-in-JS",
      "Использовать глобальные стили для библиотеки и CSS-in-JS для кастомных компонентов",
      "Создать wrapper компоненты поверх CSS классов",
      "Импортировать CSS файлы внутри styled-components"
    ],
    correctAnswer: 2,
    explanation: "Создание wrapper компонентов позволяет инкапсулировать CSS классы библиотек в styled-components, обеспечивая единообразный API и возможность расширения стилей.",
    topic: "CSS-in-JS"
  },

  // Вопросы по продвинутым техникам
  {
    id: 33,
    question: "Что такое 'style variants' и как они реализуются в CSS-in-JS?",
    options: [
      "Разные версии одного компонента с разными стилями",
      "Условные стили на основе пропсов компонента",
      "Альтернативные темы для компонентов",
      "Адаптивные стили для разных экранов"
    ],
    correctAnswer: 1,
    explanation: "Style variants - это условные стили, которые применяются на основе пропсов компонента, позволяя создавать гибкие компоненты с различными визуальными состояниями (размеры, цвета, состояния).",
    topic: "CSS-in-JS"
  },
  {
    id: 34,
    question: "Как реализовать responsive design в CSS-in-JS без медиа-запросов?",
    options: [
      "Использовать JavaScript для определения размера экрана",
      "Создать отдельные компоненты для каждого размера",
      "Применить CSS Container Queries",
      "Использовать CSS Custom Properties"
    ],
    correctAnswer: 0,
    explanation: "В CSS-in-JS можно использовать JavaScript (например, useMediaQuery хуки) для определения размера экрана и условного применения стилей, что даёт больше контроля чем традиционные медиа-запросы.",
    topic: "CSS-in-JS"
  },
  {
    id: 35,
    question: "Что такое 'style interpolation' в CSS-in-JS и для чего используется?",
    options: [
      "Автоматическое добавление единиц измерения",
      "Вставка JavaScript значений в CSS код",
      "Перевод CSS свойств в другие единицы",
      "Создание плавных переходов между стилями"
    ],
    correctAnswer: 1,
    explanation: "Style interpolation позволяет вставлять JavaScript переменные, функции и выражения непосредственно в CSS код, используя template literals или специальный синтаксис библиотеки.",
    topic: "CSS-in-JS"
  },

  // Вопросы по безопасности
  {
    id: 36,
    question: "Какая уязвимость может возникнуть при использовании пользовательского ввода в CSS-in-JS стилях?",
    options: [
      "XSS через инъекцию CSS кода",
      "CSRF атаки через стили",
      "SQL инъекции в CSS",
      "Утечка данных через CSS selectors"
    ],
    correctAnswer: 0,
    explanation: "Прямое использование пользовательского ввода в CSS-in-JS может привести к CSS injection атакам, где злоумышленник может внедрить вредоносный CSS код, поэтому важно валидировать и санитизировать входные данные.",
    topic: "CSS-in-JS"
  },
  {
    id: 37,
    question: "Как предотвратить CSS injection при динамическом создании стилей?",
    options: [
      "Использовать только предопределённые значения",
      "Валидировать и санитизировать пользовательский ввод",
      "Применять Content Security Policy",
      "Все перечисленные варианты"
    ],
    correctAnswer: 3,
    explanation: "Для защиты от CSS injection необходим комплексный подход: валидация ввода, использование allowlist значений, настройка CSP заголовков и избегание прямой интерполяции пользовательских данных в стили.",
    topic: "CSS-in-JS"
  },

  // Вопросы по современным тенденциям
  {
    id: 38,
    question: "Какая современная альтернатива CSS-in-JS набирает популярность?",
    options: [
      "CSS Modules с TypeScript",
      "Utility-first CSS (Tailwind CSS)",
      "PostCSS с плагинами",
      "Vanilla CSS с CSS Custom Properties"
    ],
    correctAnswer: 1,
    explanation: "Utility-first подход, особенно Tailwind CSS, становится популярной альтернативой CSS-in-JS, предлагая быструю разработку, лучшую производительность и меньший JavaScript бандл.",
    topic: "CSS-in-JS"
  },
  {
    id: 39,
    question: "Что такое 'CSS-in-TS' и чем отличается от обычного CSS-in-JS?",
    options: [
      "CSS написанный на TypeScript",
      "Типобезопасные стили с полной поддержкой TypeScript",
      "CSS генерируемый из TypeScript интерфейсов",
      "Новая спецификация CSS для TypeScript"
    ],
    correctAnswer: 1,
    explanation: "CSS-in-TS обеспечивает полную типобезопасность стилей, включая автокомплит CSS свойств, валидацию значений и типизацию theme объектов, что улучшает developer experience.",
    topic: "CSS-in-JS"
  },
  {
    id: 40,
    question: "Какая тенденция наблюдается в развитии CSS-in-JS библиотек в 2024-2025 году?",
    options: [
      "Переход на Web Components",
      "Фокус на zero-runtime решениях",
      "Интеграция с AI для генерации стилей",
      "Полный отказ от JavaScript в пользу CSS"
    ],
    correctAnswer: 1,
    explanation: "Современные CSS-in-JS библиотеки всё больше фокусируются на zero-runtime подходе, генерируя статический CSS во время сборки для улучшения производительности и уменьшения размера JavaScript бандла.",
    topic: "CSS-in-JS"
  }
]
