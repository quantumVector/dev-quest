import type { Question } from '@/types/question.ts'

export const cssInJsQuestions: Question[] = [
  {
    id: 1,
    question: "Какое главное преимущество CSS-in-JS подхода по сравнению с традиционным CSS?",
    options: [
      "Лучшая производительность браузера",
      "Динамические стили на основе пропсов компонентов",
      "Меньший размер бандла",
      "Поддержка всех браузеров без полифиллов"
    ],
    correctAnswer: 1,
    explanation: "CSS-in-JS позволяет создавать динамические стили, которые могут изменяться в зависимости от пропсов, состояния компонента или других JavaScript переменных, что невозможно с традиционным CSS.",
    topic: "CSS-in-JS"
  },
  {
    id: 2,
    question: "В чем основное различие между runtime и compile-time CSS-in-JS библиотеками?",
    options: [
      "Runtime быстрее выполняется в браузере",
      "Compile-time генерирует CSS во время сборки, runtime - в браузере",
      "Runtime поддерживает больше CSS свойств",
      "Compile-time работает только с React"
    ],
    correctAnswer: 1,
    explanation: "Compile-time библиотеки (например, Linaria, vanilla-extract) генерируют статический CSS во время сборки, а runtime библиотеки (styled-components, emotion) создают стили в браузере во время выполнения.",
    topic: "CSS-in-JS"
  },
  {
    id: 3,
    question: "Какая из перечисленных библиотек НЕ является CSS-in-JS решением?",
    options: [
      "styled-components",
      "Emotion",
      "Tailwind CSS",
      "JSS"
    ],
    correctAnswer: 2,
    explanation: "Tailwind CSS - это utility-first CSS фреймворк, который использует готовые классы, а не генерирует стили в JavaScript. Остальные являются CSS-in-JS библиотеками.",
    topic: "CSS-in-JS"
  },
  {
    id: 4,
    question: "Какая потенциальная проблема может возникнуть при использовании runtime CSS-in-JS библиотек?",
    options: [
      "Невозможность использования псевдоклассов",
      "Блокировка рендеринга до загрузки CSS",
      "Отсутствие поддержки медиа-запросов",
      "Конфликт стилей между компонентами"
    ],
    correctAnswer: 1,
    explanation: "Runtime CSS-in-JS может блокировать рендеринг, поскольку стили генерируются и внедряются в DOM во время выполнения JavaScript, что может создать задержку до отображения контента (FOUC - Flash of Unstyled Content).",
    topic: "CSS-in-JS"
  },
  {
    id: 5,
    question: "Какой подход использует библиотека styled-components для создания стилизованных компонентов?",
    options: [
      "CSS классы с автоматически генерируемыми именами",
      "Inline стили через атрибут style",
      "Template literals с CSS синтаксисом",
      "JSON объекты со стилями"
    ],
    correctAnswer: 2,
    explanation: "styled-components использует tagged template literals, что позволяет писать CSS синтаксис внутри JavaScript, создавая новые React компоненты с встроенными стилями.",
    topic: "CSS-in-JS"
  },
  {
    id: 6,
    question: "Что такое 'critical CSS' в контексте CSS-in-JS?",
    options: [
      "CSS для критически важных элементов страницы",
      "Стили, которые необходимы для первоначального рендеринга",
      "CSS с высокой специфичностью",
      "Стили для обработки ошибок"
    ],
    correctAnswer: 1,
    explanation: "Critical CSS - это минимальный набор стилей, необходимый для рендеринга видимой части страницы (above-the-fold). В CSS-in-JS это помогает оптимизировать загрузку, отправляя только необходимые стили для первоначального рендеринга.",
    topic: "CSS-in-JS"
  },
  {
    id: 7,
    question: "Какое преимущество дает использование CSS-in-JS при работе с темизацией (theming)?",
    options: [
      "Автоматическая генерация темных тем",
      "Динамическое переключение тем без перезагрузки CSS",
      "Меньший размер файлов тем",
      "Лучшая поддержка старых браузеров"
    ],
    correctAnswer: 1,
    explanation: "CSS-in-JS позволяет динамически изменять темы через JavaScript без необходимости загружать новые CSS файлы, так как стили генерируются в runtime на основе текущих значений темы.",
    topic: "CSS-in-JS"
  },
  {
    id: 8,
    question: "Что означает 'atomic CSS' в контексте CSS-in-JS библиотек?",
    options: [
      "CSS с использованием !important",
      "Очень маленькие CSS правила для одного свойства",
      "CSS без использования каскада",
      "CSS для атомарных операций"
    ],
    correctAnswer: 1,
    explanation: "Atomic CSS подразумевает создание множества маленьких CSS классов, каждый из которых применяет одно или очень небольшое количество CSS свойств. Это подход используют библиотеки как Tailwind CSS или некоторые CSS-in-JS решения.",
    topic: "CSS-in-JS"
  },
  {
    id: 9,
    question: "Какая из библиотек является примером compile-time CSS-in-JS решения?",
    options: [
      "styled-components",
      "Emotion",
      "Linaria",
      "Aphrodite"
    ],
    correctAnswer: 2,
    explanation: "Linaria - это compile-time CSS-in-JS библиотека, которая извлекает CSS во время сборки и генерирует статические CSS файлы, в отличие от runtime библиотек как styled-components или Emotion.",
    topic: "CSS-in-JS"
  },
  {
    id: 10,
    question: "Что такое 'CSS-in-JS with zero runtime'?",
    options: [
      "CSS-in-JS без использования JavaScript",
      "Библиотеки, которые не добавляют код в финальный бандл",
      "CSS-in-JS без поддержки динамических стилей",
      "Статическая генерация CSS во время сборки"
    ],
    correctAnswer: 3,
    explanation: "Zero runtime CSS-in-JS означает, что весь CSS извлекается и генерируется во время сборки (build time), не добавляя JavaScript код для создания стилей в браузере. Примеры: Linaria, vanilla-extract.",
    topic: "CSS-in-JS"
  },
  {
    id: 11,
    question: "Какая проблема решается с помощью CSS-in-JS при работе с компонентами?",
    options: [
      "Медленная загрузка стилей",
      "Глобальное пространство имен CSS",
      "Отсутствие поддержки Flexbox",
      "Невозможность использования переменных"
    ],
    correctAnswer: 1,
    explanation: "CSS-in-JS решает проблему глобального пространства имен CSS, автоматически изолируя стили компонентов и предотвращая конфликты между различными частями приложения.",
    topic: "CSS-in-JS"
  },
  {
    id: 12,
    question: "Как CSS-in-JS библиотеки обычно решают проблему dead code elimination для стилей?",
    options: [
      "Через статический анализ unused стилей",
      "Автоматически удаляют неиспользуемые стили при сборке",
      "Стили привязаны к компонентам и удаляются вместе с ними",
      "Требуют ручной очистки неиспользуемых стилей"
    ],
    correctAnswer: 2,
    explanation: "В CSS-in-JS стили тесно связаны с компонентами, поэтому когда компонент не используется в приложении, его стили также автоматически исключаются из финального бандла, решая проблему мертвого кода.",
    topic: "CSS-in-JS"
  },
  {
    id: 13,
    question: "Какой недостаток может быть у runtime CSS-in-JS при Server-Side Rendering (SSR)?",
    options: [
      "Невозможность рендерить стили на сервере",
      "Гидратация может вызвать Flash of Unstyled Content (FOUC)",
      "Стили не передаются клиенту",
      "Медленная работа сервера"
    ],
    correctAnswer: 1,
    explanation: "При SSR с runtime CSS-in-JS может возникнуть FOUC, когда сервер отправляет HTML без стилей, а стили генерируются только после загрузки и выполнения JavaScript на клиенте, что создает задержку в отображении стилизованного контента.",
    topic: "CSS-in-JS"
  },
  {
    id: 14,
    question: "Что такое 'style injection' в контексте CSS-in-JS?",
    options: [
      "Внедрение вредоносного CSS кода",
      "Добавление стилей в DOM через JavaScript",
      "Импорт внешних CSS файлов",
      "Копирование стилей между компонентами"
    ],
    correctAnswer: 1,
    explanation: "Style injection - это процесс динамического добавления CSS правил в DOM через JavaScript, который используется runtime CSS-in-JS библиотеками для применения стилей к компонентам.",
    topic: "CSS-in-JS"
  },
  {
    id: 15,
    question: "Какое преимущество дает использование TypeScript с CSS-in-JS?",
    options: [
      "Автоматическая генерация CSS",
      "Типизация стилей и theme объектов",
      "Лучшая производительность рендеринга",
      "Поддержка всех CSS свойств"
    ],
    correctAnswer: 1,
    explanation: "TypeScript с CSS-in-JS обеспечивает типизацию стилей, theme объектов и пропсов компонентов, что позволяет выявлять ошибки на этапе разработки и улучшает автодополнение в IDE.",
    topic: "CSS-in-JS"
  },
  {
    id: 16,
    question: "Что такое 'CSS prop' в библиотеках как Emotion?",
    options: [
      "Специальное CSS свойство для анимаций",
      "Проп для передачи стилей напрямую в JSX элементы",
      "CSS переменная в JavaScript",
      "Метод для создания CSS классов"
    ],
    correctAnswer: 1,
    explanation: "CSS prop позволяет писать стили напрямую в JSX элементах, например <div css={styles}>, что дает более прямой способ применения стилей без создания styled компонентов.",
    topic: "CSS-in-JS"
  },
  {
    id: 17,
    question: "Какой фактор НЕ следует учитывать при выборе между runtime и compile-time CSS-in-JS?",
    options: [
      "Требования к производительности",
      "Необходимость динамических стилей",
      "Размер команды разработчиков",
      "Настройка сборки проекта"
    ],
    correctAnswer: 2,
    explanation: "Размер команды разработчиков не является техническим фактором при выборе CSS-in-JS подхода. Важнее учитывать производительность, потребность в динамических стилях и сложность настройки сборки.",
    topic: "CSS-in-JS"
  },
  {
    id: 18,
    question: "Как CSS-in-JS библиотеки обычно обеспечивают автопрефиксинг?",
    options: [
      "Встроенная поддержка всех префиксов",
      "Интеграция с PostCSS и autoprefixer",
      "Ручное добавление префиксов разработчиком",
      "Автоматическое определение браузера пользователя"
    ],
    correctAnswer: 1,
    explanation: "Большинство CSS-in-JS библиотек интегрируются с PostCSS и autoprefixer плагинами для автоматического добавления вендорных префиксов, или имеют встроенную поддержку автопрефиксинга.",
    topic: "CSS-in-JS"
  },
  {
    id: 19,
    question: "Что означает 'co-location' в контексте CSS-in-JS?",
    options: [
      "Размещение CSS файлов в одной папке",
      "Хранение стилей рядом с компонентом, который их использует",
      "Использование одинаковых стилей в разных компонентах",
      "Группировка стилей по функциональности"
    ],
    correctAnswer: 1,
    explanation: "Co-location означает размещение стилей непосредственно рядом с компонентом (в том же файле или папке), что упрощает поиск, изменение и удаление стилей вместе с соответствующим компонентом.",
    topic: "CSS-in-JS"
  },
  {
    id: 20,
    question: "Какая стратегия кэширования чаще всего используется в CSS-in-JS библиотеках?",
    options: [
      "Кэширование на уровне браузера",
      "Кэширование сгенерированных CSS правил по hash ключу",
      "Кэширование в localStorage",
      "Кэширование на сервере"
    ],
    correctAnswer: 1,
    explanation: "CSS-in-JS библиотеки обычно кэшируют сгенерированные CSS правила, используя hash от содержимого стилей как ключ, чтобы избежать повторной генерации одинаковых стилей и улучшить производительность.",
    topic: "CSS-in-JS"
  }
]
