import type { Question } from '@/types/question.ts'

export const cssRelativeUnitsQuestions: Question[] = [
  {
    id: 1,
    question: "В чем основное преимущество использования относительных единиц измерения (em, rem, %) перед абсолютными (px)?",
    options: [
      "Они занимают меньше места в коде",
      "Они обеспечивают лучшую адаптивность и масштабируемость интерфейса",
      "Они работают быстрее в браузере",
      "Они поддерживаются только в современных браузерах"
    ],
    correctAnswer: 1,
    explanation: "Относительные единицы обеспечивают лучшую адаптивность, так как масштабируются относительно родительских элементов или базовых настроек браузера, что делает интерфейс более гибким для разных устройств и пользовательских предпочтений.",
    topic: "Относительные единицы измерения"
  },
  {
    id: 2,
    question: "Чем отличается единица 'em' от единицы 'rem' в CSS?",
    options: [
      "em относится к размеру шрифта родительского элемента, rem - к размеру шрифта корневого элемента",
      "em используется только для шрифтов, rem - для всех свойств",
      "em работает в старых браузерах, rem - только в новых",
      "Никакой разницы нет, это синонимы"
    ],
    correctAnswer: 0,
    explanation: "Единица 'em' вычисляется относительно размера шрифта родительского элемента, что может привести к накоплению значений. 'rem' всегда вычисляется относительно размера шрифта корневого элемента (html), что обеспечивает более предсказуемое поведение.",
    topic: "Относительные единицы измерения"
  },
  {
    id: 3,
    question: "Какой недостаток может возникнуть при чрезмерном использовании единиц 'em'?",
    options: [
      "Медленная работа браузера",
      "Плохая поддержка в мобильных браузерах",
      "Накопление (compound) значений при вложенности элементов",
      "Невозможность использования с CSS Grid"
    ],
    correctAnswer: 2,
    explanation: "При использовании 'em' во вложенных элементах значения накапливаются (компаундируются). Например, если родитель имеет font-size: 1.2em, а дочерний элемент тоже 1.2em, то итоговый размер будет 1.2 × 1.2 = 1.44em от базового размера.",
    topic: "Относительные единицы измерения"
  },
  {
    id: 4,
    question: "В каком случае лучше всего использовать единицы viewport (vw, vh, vmin, vmax)?",
    options: [
      "Для размеров текста в мобильных приложениях",
      "Для создания полноэкранных секций и адаптивной типографики",
      "Для отступов между элементами",
      "Для границ и теней элементов"
    ],
    correctAnswer: 1,
    explanation: "Единицы viewport (vw, vh, vmin, vmax) идеально подходят для создания полноэкранных секций, адаптивной типографики и элементов, которые должны масштабироваться пропорционально размеру экрана. 1vw = 1% ширины viewport, 1vh = 1% высоты viewport.",
    topic: "Относительные единицы измерения"
  },
  {
    id: 5,
    question: "Что представляет собой единица 'ch' в CSS?",
    options: [
      "Высота символа в текущем шрифте",
      "Ширина символа '0' (ноль) в текущем шрифте",
      "Средняя ширина символа в алфавите",
      "Размер пробела между символами"
    ],
    correctAnswer: 1,
    explanation: "Единица 'ch' равна ширине символа '0' (ноль) в используемом шрифте. Это особенно полезно для установки ширины контейнеров, которые должны вмещать определенное количество символов, например, для полей ввода или кода.",
    topic: "Относительные единицы измерения"
  },
  {
    id: 6,
    question: "Чем единица 'ex' отличается от других относительных единиц?",
    options: [
      "Она основана на высоте строчной буквы 'x' в текущем шрифте",
      "Она используется только для внешних отступов",
      "Она работает только с flexbox",
      "Она эквивалентна 0.5em"
    ],
    correctAnswer: 0,
    explanation: "Единица 'ex' равна высоте строчной буквы 'x' в текущем шрифте (x-height). Она редко используется, но может быть полезна для точного позиционирования элементов относительно базовой линии текста.",
    topic: "Относительные единицы измерения"
  },
  {
    id: 7,
    question: "В чем разница между единицами 'vmin' и 'vmax'?",
    options: [
      "vmin - минимальная ширина, vmax - максимальная ширина viewport",
      "vmin - меньшая из vw или vh, vmax - большая из vw или vh",
      "vmin работает на мобильных, vmax - на десктопе",
      "Это устаревшие единицы, которые не следует использовать"
    ],
    correctAnswer: 1,
    explanation: "vmin равна меньшему значению из vw или vh (1% от меньшей стороны viewport), а vmax равна большему значению из vw или vh (1% от большей стороны viewport). Это полезно для создания квадратных элементов или адаптивной типографики.",
    topic: "Относительные единицы измерения"
  },
  {
    id: 8,
    question: "Какая единица измерения лучше всего подходит для создания отступов и полей в компонентной системе?",
    options: [
      "px - для точного контроля",
      "em - для масштабирования с размером шрифта",
      "rem - для консистентности во всей системе",
      "% - для адаптивности"
    ],
    correctAnswer: 2,
    explanation: "rem обеспечивает консистентность отступов и полей во всей системе, так как всегда основывается на размере шрифта корневого элемента. Это предотвращает накопление значений и облегчает поддержку единообразного spacing'а.",
    topic: "Относительные единицы измерения"
  },
  {
    id: 9,
    question: "При использовании CSS Grid, какие единицы лучше использовать для определения размеров колонок и строк?",
    options: [
      "Только пиксели для точности",
      "Комбинацию fr, минимальных размеров в rem и максимальных в vw/vh",
      "Только проценты для адаптивности",
      "Только em для масштабируемости"
    ],
    correctAnswer: 1,
    explanation: "В CSS Grid эффективно комбинировать fr (fractional units) для распределения доступного пространства, rem для минимальных размеров (например, в minmax()) и viewport единицы для максимальных ограничений. Это обеспечивает гибкость и контроль.",
    topic: "Относительные единицы измерения"
  },
  {
    id: 10,
    question: "Что произойдет, если задать font-size: 0 родительскому элементу и использовать em для дочернего?",
    options: [
      "Дочерний элемент будет иметь размер шрифта браузера по умолчанию",
      "Дочерний элемент будет невидимым (размер 0)",
      "Браузер выдаст ошибку",
      "em автоматически переключится на rem"
    ],
    correctAnswer: 1,
    explanation: "Если родительский элемент имеет font-size: 0, то любое значение в em для дочернего элемента будет вычислено как 0 (например, 1.5em × 0 = 0). Это одна из причин, почему rem часто предпочтительнее em для предсказуемого поведения.",
    topic: "Относительные единицы измерения"
  },
  {
    id: 11,
    question: "Какую проблему решают CSS логические единицы (lh, rlh) введенные в современных браузерах?",
    options: [
      "Они обеспечивают лучшую производительность",
      "Они позволяют создавать размеры на основе высоты строки",
      "Они работают только с веб-компонентами",
      "Они заменяют все остальные единицы"
    ],
    correctAnswer: 1,
    explanation: "Единицы lh (line-height) и rlh (root line-height) основаны на высоте строки элемента или корневого элемента соответственно. Это полезно для создания вертикальных ритмов и выравнивания элементов относительно строк текста.",
    topic: "Относительные единицы измерения"
  },
  {
    id: 12,
    question: "В каком сценарии использование процентов (%) может быть проблематичным?",
    options: [
      "При создании отзывчивых изображений",
      "При установке высоты элемента, когда родитель не имеет явно заданной высоты",
      "При создании сеток",
      "При работе с text размерами"
    ],
    correctAnswer: 1,
    explanation: "Проценты для высоты вычисляются относительно высоты родительского элемента. Если родитель не имеет явно заданной высоты, браузер может не смочь вычислить процентную высоту, что приведет к неожиданному поведению или игнорированию свойства.",
    topic: "Относительные единицы измерения"
  }
]
