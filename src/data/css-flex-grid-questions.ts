import type { Question } from '@/types/question.ts'

export const cssFlexGridQuestions: Question[] = [
  {
    id: 1,
    question: "В какой ситуации Flexbox является более подходящим выбором, чем CSS Grid?",
    options: [
      "При создании двумерного макета с фиксированными рядами и колонками",
      "При создании одномерного макета с выравниванием элементов в ряд или колонку",
      "При создании сложной сетки с неравномерными областями",
      "При создании макета с перекрывающимися элементами"
    ],
    correctAnswer: 1,
    explanation: "Flexbox идеально подходит для одномерных макетов, где нужно выровнять элементы в одном направлении (горизонтально или вертикально) и управлять их распределением вдоль главной оси.",
    topic: "Flex vs Grid"
  },
  {
    id: 2,
    question: "Какое основное преимущество CSS Grid перед Flexbox при создании макетов?",
    options: [
      "Лучшая поддержка в старых браузерах",
      "Возможность создания двумерных макетов с одновременным контролем строк и столбцов",
      "Более простой синтаксис",
      "Лучшая производительность"
    ],
    correctAnswer: 1,
    explanation: "CSS Grid позволяет создавать двумерные макеты, где можно одновременно контролировать расположение элементов по строкам и столбцам, что делает его идеальным для сложных макетов.",
    topic: "Flex vs Grid"
  },
  {
    id: 3,
    question: "В каком случае Flexbox и Grid НЕ могут заменить друг друга?",
    options: [
      "При создании навигационного меню",
      "При создании карточного макета",
      "При создании макета с областями разного размера, где элементы должны занимать несколько строк/столбцов одновременно",
      "При центрировании элементов"
    ],
    correctAnswer: 2,
    explanation: "CSS Grid незаменим для создания макетов с областями разного размера, где элементы могут занимать несколько строк и столбцов одновременно (grid-area, grid-column-span, grid-row-span). Flexbox не может обеспечить такой уровень контроля над двумерным размещением.",
    topic: "Flex vs Grid"
  },
  {
    id: 4,
    question: "Какой подход лучше использовать для создания адаптивного макета с компонентами разной высоты?",
    options: [
      "Только Flexbox для всего макета",
      "Только CSS Grid для всего макета",
      "CSS Grid для общей структуры страницы, Flexbox для компонентов внутри",
      "Только float и positioning"
    ],
    correctAnswer: 2,
    explanation: "Наилучший подход - использовать CSS Grid для создания общей структуры страницы (header, main, sidebar, footer), а Flexbox для внутренних компонентов, где нужно выровнять элементы в одном направлении. Это обеспечивает максимальную гибкость и контроль.",
    topic: "Flex vs Grid"
  },
  {
    id: 5,
    question: "Что означает свойство flex-grow: 2 для flex-элемента?",
    options: [
      "Элемент будет в 2 раза больше других элементов",
      "Элемент получит в 2 раза больше свободного пространства при его распределении",
      "Элемент будет занимать 2 единицы ширины",
      "Элемент будет увеличиваться с коэффициентом 2"
    ],
    correctAnswer: 1,
    explanation: "flex-grow определяет, какую долю свободного пространства получит элемент. Значение 2 означает, что элемент получит в 2 раза больше свободного места, чем элементы с flex-grow: 1, при распределении оставшегося пространства контейнера.",
    topic: "Flexbox Properties"
  },
  {
    id: 6,
    question: "Какое значение flex-basis определяет базовый размер элемента до распределения свободного пространства?",
    options: [
      "auto - использует width/height элемента",
      "0 - элемент начинает с нулевого размера",
      "content - размер основан на содержимом",
      "Все перечисленные варианты корректны"
    ],
    correctAnswer: 3,
    explanation: "flex-basis может принимать различные значения: auto (использует установленные width/height), 0 (элемент начинает с нулевого размера), content (размер определяется содержимым), или конкретные размеры (px, %, em и т.д.).",
    topic: "Flexbox Properties"
  },
  {
    id: 7,
    question: "Что произойдет с flex-элементами при использовании justify-content: space-between?",
    options: [
      "Элементы будут равномерно распределены с одинаковыми промежутками между ними",
      "Первый элемент прижмется к началу, последний к концу, остальные равномерно распределятся между ними",
      "Все элементы будут центрированы",
      "Элементы будут растянуты на всю ширину контейнера"
    ],
    correctAnswer: 1,
    explanation: "justify-content: space-between прижимает первый элемент к началу контейнера, последний к концу, а остальные равномерно распределяет в промежутке с одинаковыми расстояниями между соседними элементами.",
    topic: "Flexbox Alignment"
  },
  {
    id: 8,
    question: "В чем разница между align-items и align-content во Flexbox?",
    options: [
      "align-items выравнивает элементы по главной оси, align-content по поперечной",
      "align-items выравнивает отдельные элементы по поперечной оси, align-content выравнивает строки при переносе",
      "Никакой разницы, это синонимы",
      "align-items работает только с flex-direction: row"
    ],
    correctAnswer: 1,
    explanation: "align-items выравнивает каждый flex-элемент по поперечной оси внутри своей строки, а align-content выравнивает сами строки по поперечной оси при наличии переноса (flex-wrap: wrap).",
    topic: "Flexbox Alignment"
  },
  {
    id: 9,
    question: "Как создать CSS Grid с 3 колонками равной ширины?",
    options: [
      "grid-template-columns: 1fr 1fr 1fr",
      "grid-template-columns: repeat(3, 1fr)",
      "grid-template-columns: 33.33% 33.33% 33.33%",
      "Все варианты корректны"
    ],
    correctAnswer: 3,
    explanation: "Все три варианта создают 3 колонки равной ширины: 1fr 1fr 1fr и repeat(3, 1fr) используют фракционные единицы, а 33.33% использует проценты. repeat() - это просто сокращенная запись для повторяющихся значений.",
    topic: "Grid Template"
  },
  {
    id: 10,
    question: "Что означает значение 'fr' в CSS Grid?",
    options: [
      "Фиксированный размер в пикселях",
      "Процентное значение от контейнера",
      "Фракционная единица, представляющая долю свободного пространства",
      "Размер, основанный на содержимом"
    ],
    correctAnswer: 2,
    explanation: "fr (fraction) - это фракционная единица в CSS Grid, которая представляет долю доступного свободного пространства в grid-контейнере. 1fr означает одну долю, 2fr - две доли и т.д.",
    topic: "Grid Units"
  },
  {
    id: 11,
    question: "Как разместить элемент в определенной области CSS Grid?",
    options: [
      "Только с помощью grid-column и grid-row",
      "Только с помощью grid-area",
      "С помощью grid-template-areas и grid-area",
      "Все варианты возможны"
    ],
    correctAnswer: 3,
    explanation: "Элемент можно разместить несколькими способами: grid-column/grid-row (указывая номера линий), grid-area с именованными областями (определенными в grid-template-areas), или grid-area с координатами (grid-area: row-start / col-start / row-end / col-end).",
    topic: "Grid Placement"
  },
  {
    id: 12,
    question: "Что произойдет при использовании grid-auto-flow: column?",
    options: [
      "Элементы будут размещаться по строкам слева направо",
      "Элементы будут размещаться по колонкам сверху вниз",
      "Элементы будут автоматически создавать новые колонки",
      "Элементы будут размещаться случайным образом"
    ],
    correctAnswer: 1,
    explanation: "grid-auto-flow: column изменяет направление автоматического размещения элементов с построчного (по умолчанию) на поколоночное. Элементы будут заполнять первую колонку сверху вниз, затем переходить ко второй колонке и т.д.",
    topic: "Grid Auto Flow"
  },
  {
    id: 13,
    question: "Как центрировать элемент с помощью CSS Grid?",
    options: [
      "justify-content: center и align-content: center",
      "justify-items: center и align-items: center",
      "place-items: center",
      "Все варианты работают в разных ситуациях"
    ],
    correctAnswer: 3,
    explanation: "Для центрирования в Grid есть несколько подходов: place-items: center центрирует содержимое ячеек, justify/align-content центрирует всю сетку в контейнере, а justify/align-items центрирует элементы в их ячейках. place-items - это сокращение для align-items и justify-items.",
    topic: "Grid Alignment"
  },
  {
    id: 14,
    question: "В чем особенность использования minmax() в CSS Grid?",
    options: [
      "Определяет только минимальный размер",
      "Определяет только максимальный размер",
      "Позволяет установить диапазон размеров от минимума до максимума",
      "Работает только с пикселями"
    ],
    correctAnswer: 2,
    explanation: "minmax(min, max) в CSS Grid позволяет определить диапазон размеров для треков (строк/колонок). Размер будет не меньше минимального и не больше максимального значения, адаптируясь к содержимому и доступному пространству.",
    topic: "Grid Sizing"
  },
  {
    id: 15,
    question: "Когда следует использовать auto-fit вместо auto-fill в repeat()?",
    options: [
      "auto-fit создает больше колонок",
      "auto-fill лучше для производительности",
      "auto-fit схлопывает пустые треки, auto-fill сохраняет их",
      "Между ними нет разницы"
    ],
    correctAnswer: 2,
    explanation: "В repeat(auto-fit, ...) пустые треки схлопываются и занимают нулевое пространство, позволяя существующим элементам растягиваться. В repeat(auto-fill, ...) пустые треки сохраняются, создавая фиксированное количество колонок даже без содержимого.",
    topic: "Grid Auto Sizing"
  },
  {
    id: 16,
    question: "Как создать липкий (sticky) футер с помощью Flexbox?",
    options: [
      "Установить min-height: 100vh на body и flex: 1 на main",
      "Использовать position: sticky на footer",
      "Установить height: 100% на все родительские элементы",
      "Использовать margin-top: auto на footer"
    ],
    correctAnswer: 0,
    explanation: "Для липкого футера с Flexbox: контейнер (body) должен иметь min-height: 100vh и display: flex с flex-direction: column, а основной контент (main) - flex: 1, чтобы занимать всё доступное пространство и прижимать футер к низу.",
    topic: "Flexbox Layout"
  },
  {
    id: 17,
    question: "Что происходит с flex-элементами при flex-wrap: wrap?",
    options: [
      "Элементы сжимаются, чтобы поместиться в одну строку",
      "Элементы переносятся на новые строки при нехватке места",
      "Элементы скрываются за границами контейнера",
      "Элементы растягиваются на всю ширину"
    ],
    correctAnswer: 1,
    explanation: "flex-wrap: wrap позволяет flex-элементам переносится на новые строки, когда они не помещаются в текущую строку контейнера, вместо сжатия или выхода за границы.",
    topic: "Flexbox Wrapping"
  },
  {
    id: 18,
    question: "Как создать сетку карточек одинаковой высоты с помощью CSS Grid?",
    options: [
      "Использовать grid-template-rows: repeat(auto, 1fr)",
      "Установить align-items: stretch (значение по умолчанию)",
      "Добавить min-height для всех карточек",
      "Использовать display: flex на каждой карточке"
    ],
    correctAnswer: 1,
    explanation: "В CSS Grid элементы по умолчанию растягиваются на всю высоту своей ячейки благодаря align-items: stretch. Это автоматически создает карточки одинаковой высоты в каждой строке сетки.",
    topic: "Grid Layout"
  },
  {
    id: 19,
    question: "В каком случае стоит использовать order в Flexbox?",
    options: [
      "Для изменения порядка элементов только в CSS без изменения HTML",
      "Для улучшения производительности",
      "Для создания анимаций",
      "Для изменения размеров элементов"
    ],
    correctAnswer: 0,
    explanation: "Свойство order позволяет изменять визуальный порядок flex-элементов без изменения порядка в HTML. Это полезно для адаптивного дизайна, когда нужно по-разному располагать элементы на разных размерах экрана.",
    topic: "Flexbox Order"
  },
  {
    id: 20,
    question: "Какой подход лучше для создания адаптивной галереи изображений?",
    options: [
      "CSS Grid с auto-fit и minmax()",
      "Flexbox с flex-wrap: wrap",
      "Float с clearfix",
      "CSS Grid всегда лучше Flexbox"
    ],
    correctAnswer: 0,
    explanation: "CSS Grid с repeat(auto-fit, minmax(min-width, 1fr)) идеально подходит для адаптивных галерей, автоматически подстраивая количество колонок под размер экрана и поддерживая минимальный размер элементов.",
    topic: "Responsive Design"
  }
]
